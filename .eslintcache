[{"/Users/ccollie/WebstormProjects/toro-ui/src/application/App.tsx":"1","/Users/ccollie/WebstormProjects/toro-ui/src/lib/config.tsx":"2","/Users/ccollie/WebstormProjects/toro-ui/src/application/AppRoutes.tsx":"3","/Users/ccollie/WebstormProjects/toro-ui/src/lib/stats.ts":"4","/Users/ccollie/WebstormProjects/toro-ui/src/api/generated.ts":"5","/Users/ccollie/WebstormProjects/toro-ui/src/components/HostCard/HostCard.tsx":"6","/Users/ccollie/WebstormProjects/toro-ui/src/reportWebVitals.ts":"7","/Users/ccollie/WebstormProjects/toro-ui/src/components/RedisStats/RedisStats.tsx":"8","/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/queries.ts":"9","/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/mutations.ts":"10","/Users/ccollie/WebstormProjects/toro-ui/src/index.tsx":"11","/Users/ccollie/WebstormProjects/toro-ui/src/api/hosts/index.ts":"12","/Users/ccollie/WebstormProjects/toro-ui/src/components/RedisStats/RedisLogo.tsx":"13","/Users/ccollie/WebstormProjects/toro-ui/src/api/index.ts":"14","/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/mutations.ts":"15","/Users/ccollie/WebstormProjects/toro-ui/src/lib/utils.ts":"16","/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/queries.ts":"17","/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/index.ts":"18","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobId/index.ts":"19","/Users/ccollie/WebstormProjects/toro-ui/src/components/RelativeDateFormat/index.ts":"20","/Users/ccollie/WebstormProjects/toro-ui/src/components/RelativeDateFormat/RelativeDateFormat.tsx":"21","/Users/ccollie/WebstormProjects/toro-ui/src/lib/number.ts":"22","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-controllable.ts":"23","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-navigation-update.tsx":"24","/Users/ccollie/WebstormProjects/toro-ui/src/components/Highlight/Highlight.tsx":"25","/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/utils.ts":"26","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Progress/Progress.tsx":"27","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Details/Details.tsx":"28","/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Trash.tsx":"29","/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Promote.tsx":"30","/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/FinishedIcon.tsx":"31","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/usePaginationQueryString.ts":"32","/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/JsonSchemaLogo.tsx":"33","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-details-tabs.tsx":"34","/Users/ccollie/WebstormProjects/toro-ui/src/components/Highlight/index.ts":"35","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/DeleteQueueDialog.tsx":"36","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/index.ts":"37","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-disclosure.ts":"38","/Users/ccollie/WebstormProjects/toro-ui/src/components/Highlight/languages/stack-trace.ts":"39","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/index.ts":"40","/Users/ccollie/WebstormProjects/toro-ui/src/components/ActionIcon/index.ts":"41","/Users/ccollie/WebstormProjects/toro-ui/src/components/ActionIcon/ActionIcon.tsx":"42","/Users/ccollie/WebstormProjects/toro-ui/src/lib/index.ts":"43","/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/utils.ts":"44","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/index.ts":"45","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/QueueMenu.tsx":"46","/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Retry.tsx":"47","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Button/Button.tsx":"48","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-query-string.ts":"49","/Users/ccollie/WebstormProjects/toro-ui/src/lib/assertion.ts":"50","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueuePauseSwitch/index.ts":"51","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/CleanQueueDialog.tsx":"52","/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/index.ts":"53","/Users/ccollie/WebstormProjects/toro-ui/src/lib/function.ts":"54","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueuePauseSwitch/QueuePauseSwitch.tsx":"55","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobList/JobActions.tsx":"56","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/JobCard.tsx":"57","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Timeline/Timeline.tsx":"58","/Users/ccollie/WebstormProjects/toro-ui/src/lib/dates.ts":"59","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-interval.ts":"60","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobId/JobId.tsx":"61","/Users/ccollie/WebstormProjects/toro-ui/src/providers/AntConfigProvider.tsx":"62","/Users/ccollie/WebstormProjects/toro-ui/src/components/StatusMenu/StatusMenu.tsx":"63","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/index.tsx":"64","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/Bar/index.tsx":"65","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/Pie/index.tsx":"66","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/StatsLineChart/index.ts":"67","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/StatsLineChart/StatsLineChart.tsx":"68","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniBar/index.tsx":"69","/Users/ccollie/WebstormProjects/toro-ui/src/components/StatusMenu/index.ts":"70","/Users/ccollie/WebstormProjects/toro-ui/src/pages/ScheduledJobs.tsx":"71","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Workers.tsx":"72","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Rules.tsx":"73","/Users/ccollie/WebstormProjects/toro-ui/src/components/index.ts":"74","/Users/ccollie/WebstormProjects/toro-ui/src/components/NumberInfo/NumberInfo.tsx":"75","/Users/ccollie/WebstormProjects/toro-ui/src/components/AsyncButton/AsyncButton.tsx":"76","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/Field/index.tsx":"77","/Users/ccollie/WebstormProjects/toro-ui/src/components/Trend/index.tsx":"78","/Users/ccollie/WebstormProjects/toro-ui/src/components/AsyncButton/index.ts":"79","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/autoHeight.tsx":"80","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniProgress/index.tsx":"81","/Users/ccollie/WebstormProjects/toro-ui/src/components/HostCard/index.ts":"82","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniArea/index.tsx":"83","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniChartCard/index.tsx":"84","/Users/ccollie/WebstormProjects/toro-ui/src/components/NumberInfo/index.ts":"85","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-store.tsx":"86","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-async.ts":"87","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/JobCountsPieChart/index.tsx":"88","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/index.tsx":"89","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/RegisterQueueDialog.tsx":"90","/Users/ccollie/WebstormProjects/toro-ui/src/components/RedisStats/index.ts":"91","/Users/ccollie/WebstormProjects/toro-ui/src/components/DatePicker/index.tsx":"92","/Users/ccollie/WebstormProjects/toro-ui/src/components/RangePicker/index.tsx":"93","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-previous.ts":"94","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/QueueCard.tsx":"95","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/QueueGrid.tsx":"96","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/chart-utils.ts":"97","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/ErrorChart/ErrorRateChart.tsx":"98","/Users/ccollie/WebstormProjects/toro-ui/src/providers/ApolloProvider.tsx":"99","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-update-effect.ts":"100","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobList/use-job-query.ts":"101","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-job-actions.ts":"102","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueStateTag/index.ts":"103","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueStateTag/QueueStateTag.tsx":"104","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueFilterToolbar/index.ts":"105","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueFilterToolbar/QueueFilterToolbar.tsx":"106","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueFilterToolbar/SortSelect.tsx":"107","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-queue-filter-params.ts":"108","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Dashboard/index.tsx":"109","/Users/ccollie/WebstormProjects/toro-ui/src/components/HostStateTag/index.ts":"110","/Users/ccollie/WebstormProjects/toro-ui/src/components/HostStateTag/HostStateTag.tsx":"111","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-why-update.ts":"112","/Users/ccollie/WebstormProjects/toro-ui/src/application/Main.tsx":"113","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Metrics/index.tsx":"114","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/index.tsx":"115","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Queue/QueueHeader.tsx":"116","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Queue/index.tsx":"117","/Users/ccollie/WebstormProjects/toro-ui/src/components/ReturnValue/index.tsx":"118","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobBulkActions/index.ts":"119","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobBulkActions/JobBulkActions.tsx":"120","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobListDetail.tsx":"121","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobProgress.tsx":"122","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/columns.tsx":"123","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobActions/JobActions.tsx":"124","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobActions/index.ts":"125","/Users/ccollie/WebstormProjects/toro-ui/src/components/JobBulkActions/CleanJobsDialog.tsx":"126","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/StatsLineChart/TimeRangeToolbar.tsx":"127","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-queue-actions.ts":"128","/Users/ccollie/WebstormProjects/toro-ui/src/components/JsonEditor/index.ts":"129","/Users/ccollie/WebstormProjects/toro-ui/src/components/JsonEditor/JsonEditor.tsx":"130","/Users/ccollie/WebstormProjects/toro-ui/src/lib/ajv.ts":"131","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobSchemaDialog.tsx":"132","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-job-schema-actions.ts":"133","/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Redis.ts":"134","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/index.ts":"135","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-bar/index.ts":"136","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-bar/query-bar.tsx":"137","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/utils.ts":"138","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/constants.ts":"139","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-option/index.ts":"140","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/options-toggle/index.ts":"141","/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/index.ts":"142","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-option/query-option.tsx":"143","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/options-toggle/options-toggle.tsx":"144","/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/expression.ts":"145","/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/query.ts":"146","/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/aggregation.ts":"147","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/info-sprinkle/index.ts":"148","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/option-editor/index.ts":"149","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/info-sprinkle/info-sprinkle.tsx":"150","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/option-editor/option-editor.tsx":"151","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/index.ts":"152","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/query-autocompleter.ts":"153","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/autocompete-field.ts":"154","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/expression-operators.ts":"155","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/query-operators.ts":"156","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/conversion-operators.ts":"157","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-session-storage.ts":"158","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-unmount-effect.ts":"159","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-effect-only-once.ts":"160","/Users/ccollie/WebstormProjects/toro-ui/src/lib/event-emitter.ts":"161","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-event-emitter.ts":"162","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobList.tsx":"163","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/FilteredJobList.tsx":"164","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/events.ts":"165","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/AddJobDialog.tsx":"166"},{"size":694,"mtime":1612407807325,"results":"167","hashOfConfig":"168"},{"size":543,"mtime":1607563597668,"results":"169","hashOfConfig":"168"},{"size":966,"mtime":1610689599667,"results":"170","hashOfConfig":"168"},{"size":632,"mtime":1611067588927,"results":"171","hashOfConfig":"168"},{"size":190134,"mtime":1614043527723,"results":"172","hashOfConfig":"168"},{"size":3435,"mtime":1614003155119,"results":"173","hashOfConfig":"168"},{"size":425,"mtime":1608170320238,"results":"174","hashOfConfig":"168"},{"size":2124,"mtime":1613318344498,"results":"175","hashOfConfig":"168"},{"size":1819,"mtime":1614044735375,"results":"176","hashOfConfig":"168"},{"size":7113,"mtime":1613318344465,"results":"177","hashOfConfig":"168"},{"size":627,"mtime":1608784070121,"results":"178","hashOfConfig":"168"},{"size":2565,"mtime":1611026378319,"results":"179","hashOfConfig":"168"},{"size":1744,"mtime":1599322216080,"results":"180","hashOfConfig":"168"},{"size":104,"mtime":1608512948142,"results":"181","hashOfConfig":"168"},{"size":3233,"mtime":1611024291782,"results":"182","hashOfConfig":"168"},{"size":3514,"mtime":1613596416708,"results":"183","hashOfConfig":"168"},{"size":3135,"mtime":1613931941250,"results":"184","hashOfConfig":"168"},{"size":81,"mtime":1610997986143,"results":"185","hashOfConfig":"168"},{"size":47,"mtime":1608512948367,"results":"186","hashOfConfig":"168"},{"size":86,"mtime":1608513233787,"results":"187","hashOfConfig":"168"},{"size":931,"mtime":1608924181858,"results":"188","hashOfConfig":"168"},{"size":2755,"mtime":1608492920957,"results":"189","hashOfConfig":"168"},{"size":3293,"mtime":1608492920715,"results":"190","hashOfConfig":"168"},{"size":854,"mtime":1609694253003,"results":"191","hashOfConfig":"168"},{"size":1027,"mtime":1608694549682,"results":"192","hashOfConfig":"168"},{"size":233,"mtime":1608682650901,"results":"193","hashOfConfig":"168"},{"size":524,"mtime":1608610106130,"results":"194","hashOfConfig":"168"},{"size":935,"mtime":1611000820902,"results":"195","hashOfConfig":"168"},{"size":152,"mtime":1614001025817,"results":"196","hashOfConfig":"168"},{"size":218,"mtime":1606573741595,"results":"197","hashOfConfig":"168"},{"size":341,"mtime":1608694209289,"results":"198","hashOfConfig":"199"},{"size":1230,"mtime":1608694264251,"results":"200","hashOfConfig":"168"},{"size":4868,"mtime":1606573741867,"results":"201","hashOfConfig":"168"},{"size":5337,"mtime":1611000936722,"results":"202","hashOfConfig":"168"},{"size":59,"mtime":1608525027545,"results":"203","hashOfConfig":"168"},{"size":2320,"mtime":1608503679943,"results":"204","hashOfConfig":"168"},{"size":53,"mtime":1608526613842,"results":"205","hashOfConfig":"168"},{"size":1594,"mtime":1608685598424,"results":"206","hashOfConfig":"168"},{"size":924,"mtime":1608694668241,"results":"207","hashOfConfig":"168"},{"size":668,"mtime":1613832026180,"results":"208","hashOfConfig":"168"},{"size":62,"mtime":1608574108284,"results":"209","hashOfConfig":"168"},{"size":2393,"mtime":1614006121735,"results":"210","hashOfConfig":"168"},{"size":141,"mtime":1613806129494,"results":"211","hashOfConfig":"168"},{"size":1398,"mtime":1611000979326,"results":"212","hashOfConfig":"168"},{"size":59,"mtime":1608483415073,"results":"213","hashOfConfig":"168"},{"size":3280,"mtime":1611320163159,"results":"214","hashOfConfig":"168"},{"size":241,"mtime":1606573741596,"results":"215","hashOfConfig":"168"},{"size":444,"mtime":1606573741598,"results":"216","hashOfConfig":"168"},{"size":483,"mtime":1599322216110,"results":"217","hashOfConfig":"168"},{"size":2232,"mtime":1611327391603,"results":"218","hashOfConfig":"168"},{"size":80,"mtime":1608484271052,"results":"219","hashOfConfig":"168"},{"size":3345,"mtime":1610371167015,"results":"220","hashOfConfig":"168"},{"size":81,"mtime":1610901147366,"results":"221","hashOfConfig":"168"},{"size":1367,"mtime":1611162643145,"results":"222","hashOfConfig":"168"},{"size":871,"mtime":1608768333872,"results":"223","hashOfConfig":"168"},{"size":1898,"mtime":1614005818956,"results":"224","hashOfConfig":"168"},{"size":1719,"mtime":1611155992462,"results":"225","hashOfConfig":"168"},{"size":2128,"mtime":1611000820906,"results":"226","hashOfConfig":"168"},{"size":7061,"mtime":1611327391612,"results":"227","hashOfConfig":"168"},{"size":835,"mtime":1613575985851,"results":"228","hashOfConfig":"168"},{"size":542,"mtime":1608512948374,"results":"229","hashOfConfig":"168"},{"size":376,"mtime":1609080258362,"results":"230","hashOfConfig":"168"},{"size":1283,"mtime":1608831625680,"results":"231","hashOfConfig":"168"},{"size":626,"mtime":1609013033834,"results":"232","hashOfConfig":"168"},{"size":3093,"mtime":1608792707013,"results":"233","hashOfConfig":"168"},{"size":8400,"mtime":1609010643450,"results":"234","hashOfConfig":"168"},{"size":105,"mtime":1608828202326,"results":"235","hashOfConfig":"168"},{"size":1272,"mtime":1611158563453,"results":"236","hashOfConfig":"168"},{"size":1447,"mtime":1610630695146,"results":"237","hashOfConfig":"168"},{"size":62,"mtime":1608526613847,"results":"238","hashOfConfig":"168"},{"size":5096,"mtime":1611124478111,"results":"239","hashOfConfig":"168"},{"size":2364,"mtime":1610812039739,"results":"240","hashOfConfig":"168"},{"size":1438,"mtime":1608773506254,"results":"241","hashOfConfig":"168"},{"size":797,"mtime":1613793384431,"results":"242","hashOfConfig":"168"},{"size":1591,"mtime":1608844384015,"results":"243","hashOfConfig":"168"},{"size":2292,"mtime":1610901973486,"results":"244","hashOfConfig":"168"},{"size":427,"mtime":1608788112191,"results":"245","hashOfConfig":"168"},{"size":1004,"mtime":1608872193211,"results":"246","hashOfConfig":"168"},{"size":65,"mtime":1608561878410,"results":"247","hashOfConfig":"168"},{"size":1837,"mtime":1612178554151,"results":"248","hashOfConfig":"168"},{"size":1082,"mtime":1608786863438,"results":"249","hashOfConfig":"168"},{"size":56,"mtime":1608527260937,"results":"250","hashOfConfig":"168"},{"size":3097,"mtime":1609177788492,"results":"251","hashOfConfig":"168"},{"size":2703,"mtime":1608792209515,"results":"252","hashOfConfig":"168"},{"size":62,"mtime":1608669454100,"results":"253","hashOfConfig":"168"},{"size":4105,"mtime":1611000625351,"results":"254","hashOfConfig":"168"},{"size":1732,"mtime":1609051379235,"results":"255","hashOfConfig":"168"},{"size":2597,"mtime":1613318344473,"results":"256","hashOfConfig":"168"},{"size":5339,"mtime":1613318344505,"results":"257","hashOfConfig":"168"},{"size":4654,"mtime":1609305154329,"results":"258","hashOfConfig":"168"},{"size":59,"mtime":1609053518837,"results":"259","hashOfConfig":"168"},{"size":268,"mtime":1609081531345,"results":"260","hashOfConfig":"168"},{"size":369,"mtime":1609087896024,"results":"261","hashOfConfig":"168"},{"size":217,"mtime":1609106565537,"results":"262","hashOfConfig":"168"},{"size":4708,"mtime":1613318344505,"results":"263","hashOfConfig":"168"},{"size":538,"mtime":1609280593959,"results":"264","hashOfConfig":"199"},{"size":2671,"mtime":1611284207617,"results":"265","hashOfConfig":"168"},{"size":2167,"mtime":1610656383149,"results":"266","hashOfConfig":"168"},{"size":5182,"mtime":1614004489337,"results":"267","hashOfConfig":"168"},{"size":469,"mtime":1609645918305,"results":"268","hashOfConfig":"168"},{"size":1845,"mtime":1609710556215,"results":"269","hashOfConfig":"199"},{"size":1114,"mtime":1613931878843,"results":"270","hashOfConfig":"168"},{"size":71,"mtime":1609893486474,"results":"271","hashOfConfig":"168"},{"size":665,"mtime":1609995775839,"results":"272","hashOfConfig":"168"},{"size":86,"mtime":1609980753152,"results":"273","hashOfConfig":"168"},{"size":4551,"mtime":1613318344497,"results":"274","hashOfConfig":"168"},{"size":2298,"mtime":1610041212996,"results":"275","hashOfConfig":"168"},{"size":1083,"mtime":1613318344502,"results":"276","hashOfConfig":"168"},{"size":1095,"mtime":1613318344504,"results":"277","hashOfConfig":"168"},{"size":68,"mtime":1610426641873,"results":"278","hashOfConfig":"168"},{"size":559,"mtime":1610426642048,"results":"279","hashOfConfig":"168"},{"size":754,"mtime":1609997470443,"results":"280","hashOfConfig":"168"},{"size":3323,"mtime":1614041882563,"results":"281","hashOfConfig":"168"},{"size":5735,"mtime":1613318344508,"results":"282","hashOfConfig":"168"},{"size":8271,"mtime":1614041148242,"results":"283","hashOfConfig":"168"},{"size":3625,"mtime":1611071341769,"results":"284","hashOfConfig":"168"},{"size":1213,"mtime":1613318344509,"results":"285","hashOfConfig":"168"},{"size":1396,"mtime":1610742260598,"results":"286","hashOfConfig":"168"},{"size":126,"mtime":1610988587124,"results":"287","hashOfConfig":"168"},{"size":3773,"mtime":1614036067194,"results":"288","hashOfConfig":"168"},{"size":1632,"mtime":1611003831066,"results":"289","hashOfConfig":"168"},{"size":1288,"mtime":1610742260596,"results":"290","hashOfConfig":"168"},{"size":5780,"mtime":1614005838198,"results":"291","hashOfConfig":"168"},{"size":1679,"mtime":1614000951929,"results":"292","hashOfConfig":"168"},{"size":70,"mtime":1610853087075,"results":"293","hashOfConfig":"168"},{"size":4047,"mtime":1614041323325,"results":"294","hashOfConfig":"168"},{"size":5698,"mtime":1611372130596,"results":"295","hashOfConfig":"168"},{"size":587,"mtime":1611003082217,"results":"296","hashOfConfig":"168"},{"size":29,"mtime":1613318344480,"results":"297","hashOfConfig":"168"},{"size":3683,"mtime":1614033888551,"results":"298","hashOfConfig":"168"},{"size":1465,"mtime":1613318344503,"results":"299","hashOfConfig":"168"},{"size":8063,"mtime":1614044494271,"results":"300","hashOfConfig":"168"},{"size":1004,"mtime":1614044495563,"results":"301","hashOfConfig":"168"},{"size":66,"mtime":1613318344479,"results":"302","hashOfConfig":"168"},{"size":110,"mtime":1613627516050,"results":"303","hashOfConfig":"168"},{"size":83,"mtime":1613318344491,"results":"304","hashOfConfig":"168"},{"size":14581,"mtime":1613958048777,"results":"305","hashOfConfig":"168"},{"size":348,"mtime":1613596416506,"results":"306","hashOfConfig":"168"},{"size":303,"mtime":1613504874592,"results":"307","hashOfConfig":"168"},{"size":95,"mtime":1613318344492,"results":"308","hashOfConfig":"168"},{"size":103,"mtime":1613318344485,"results":"309","hashOfConfig":"168"},{"size":786,"mtime":1613460595486,"results":"310","hashOfConfig":"168"},{"size":2990,"mtime":1613459441075,"results":"311","hashOfConfig":"168"},{"size":960,"mtime":1613318344487,"results":"312","hashOfConfig":"168"},{"size":1472,"mtime":1613318344509,"results":"313","hashOfConfig":"168"},{"size":755,"mtime":1613318344510,"results":"314","hashOfConfig":"168"},{"size":512,"mtime":1613318344509,"results":"315","hashOfConfig":"168"},{"size":73,"mtime":1613318344482,"results":"316","hashOfConfig":"168"},{"size":73,"mtime":1613318344483,"results":"317","hashOfConfig":"168"},{"size":593,"mtime":1613318344482,"results":"318","hashOfConfig":"168"},{"size":2393,"mtime":1613505571864,"results":"319","hashOfConfig":"168"},{"size":76,"mtime":1613456228768,"results":"320","hashOfConfig":"168"},{"size":2532,"mtime":1613575155605,"results":"321","hashOfConfig":"168"},{"size":127,"mtime":1613318344487,"results":"322","hashOfConfig":"168"},{"size":5424,"mtime":1613318344489,"results":"323","hashOfConfig":"168"},{"size":2373,"mtime":1613318344490,"results":"324","hashOfConfig":"168"},{"size":1152,"mtime":1613318344488,"results":"325","hashOfConfig":"168"},{"size":1334,"mtime":1613792397976,"results":"326","hashOfConfig":"168"},{"size":227,"mtime":1613790854527,"results":"327","hashOfConfig":"168"},{"size":276,"mtime":1613788133946,"results":"328","hashOfConfig":"168"},{"size":951,"mtime":1613831393603,"results":"329","hashOfConfig":"168"},{"size":831,"mtime":1613965198336,"results":"330","hashOfConfig":"168"},{"size":4235,"mtime":1614012274722,"results":"331","hashOfConfig":"168"},{"size":5124,"mtime":1614014269973,"results":"332","hashOfConfig":"168"},{"size":1816,"mtime":1614038254343,"results":"333","hashOfConfig":"168"},{"size":6794,"mtime":1614044495579,"results":"334","hashOfConfig":"168"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},"1424lgf",{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"337"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"337"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"337"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"401"},"1tno5m",{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"337"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"337"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"447"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"337"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"337"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"337"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"337"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"337"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"337"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"337"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"337"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"337"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"337"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"337"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"337"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"337"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"559"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"337"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"337"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"337"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"337"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"337"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"593","messages":"594","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"337"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"604","messages":"605","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"337"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"617","messages":"618","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"337"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"337"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"337"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"337"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"337"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"696","messages":"697","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698","usedDeprecatedRules":"337"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"701","messages":"702","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"337"},"/Users/ccollie/WebstormProjects/toro-ui/src/application/App.tsx",[],["704","705"],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/config.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/application/AppRoutes.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/stats.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/generated.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/HostCard/HostCard.tsx",["706","707","708","709","710","711"],"import ProCard from '@ant-design/pro-card';\nimport { Col, Row, Space, Statistic } from 'antd';\nimport formatBytes from 'pretty-bytes';\nimport React, { ReactText, useCallback, useEffect, useState } from 'react';\nimport { EmptyJobCounts, JobCounts, QueueHost, StatsSnapshot } from '../../api';\nimport { useNavigate } from 'react-router-dom';\nimport { useWhyDidYouUpdate } from '../../hooks/use-why-update';\nimport { calcErrorPercentage, calcJobRatePerUnit } from '../../lib/stats';\nimport { roundNumber } from '../../lib';\nimport { JobCountsPieChart, MiniArea } from '../Charts';\nimport { HostStateTag } from '../HostStateTag';\n\ninterface HostCardProps {\n  host: QueueHost;\n}\n\nconst HostCard: React.FC<HostCardProps> = (props) => {\n  const { host } = props;\n  const [hourStats, setHourStats] = useState<StatsSnapshot>();\n  const [errorPercentage, setErrorPercentage] = useState(0);\n  const [jobsPerMinute, setJobsPerMinute] = useState(0);\n\n  useWhyDidYouUpdate('HostCard', host);\n  const [chartData, setChartData] = useState<\n    {\n      x: number;\n      y: number;\n    }[]\n  >([]);\n\n  useEffect(() => {\n    const data = (host.stats ?? []).map((val) => ({\n      x: val.startTime,\n      y: val.completed,\n    }));\n    setChartData(data);\n  }, [host?.stats]);\n\n  const navigate = useNavigate();\n  const counts: JobCounts = {\n    ...EmptyJobCounts,\n    ...host.jobCounts,\n  };\n\n  let jobTotal = 0;\n  for (const key in Object.keys(counts)) {\n    const val = (counts as any)[key];\n    if (typeof val === 'number') {\n      jobTotal += val;\n    }\n  }\n\n  function round(value: number): number {\n    return parseFloat(roundNumber(value));\n  }\n\n  useEffect(() => {\n    if (host.lastStatsSnapshot) {\n      const stats = host.lastStatsSnapshot;\n      const jobRate = calcJobRatePerUnit(stats, 'minute');\n      setHourStats(stats);\n      setErrorPercentage(round(100 * calcErrorPercentage(stats)));\n      setJobsPerMinute(jobRate);\n    }\n  }, [host.lastStatsSnapshot]);\n\n  const selectHost = useCallback(() => navigate(`/hosts/${host.id}`), [\n    host.id,\n  ]);\n\n  function byteFormatter(value: ReactText) {\n    const num: number = typeof value === 'string' ? parseInt(value) : value;\n    const formatted = isNaN(num) ? '' : formatBytes(num);\n    return <span>{formatted}</span>;\n  }\n\n  function StatsCard() {\n    return (\n      <div>\n        <Row>\n          <Col span={6}>\n            <Statistic title=\"Queues\" value={host.queueCount} />\n          </Col>\n          <Col span={6}>\n            <Statistic title=\"Workers\" value={host.workerCount} />\n          </Col>\n          <Col span={6}>\n            <Statistic title=\"Clients\" value={host.redis.connected_clients} />\n          </Col>\n          <Col span={6}>\n            <Statistic\n              title=\"Used Memory\"\n              value={host.redis.used_memory}\n              formatter={byteFormatter}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  const title = (\n    <Space size={3}>\n      <a onClick={selectHost}>{host?.name}</a>\n      <HostStateTag host={host} style={{ marginLeft: '2px' }} />\n    </Space>\n  );\n\n  return (\n    <>\n      <ProCard title={title} extra={host.uri} onClick={selectHost}>\n        <JobCountsPieChart counts={counts} height={300} />\n        <div style={{ marginBottom: '8px' }}>\n          <MiniArea height={45} color=\"#975FE4\" data={chartData} />\n        </div>\n        <StatsCard />\n      </ProCard>\n    </>\n  );\n};\n\nexport default HostCard;\n","/Users/ccollie/WebstormProjects/toro-ui/src/reportWebVitals.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/RedisStats/RedisStats.tsx",["712","713"],"import { Space, Statistic } from 'antd';\nimport ProCard from '@ant-design/pro-card';\nimport React, { ReactText } from 'react';\nimport { RedisInfo } from '../../api';\nimport { RedisLogo } from './RedisLogo';\nimport formatBytes from 'pretty-bytes';\nconst { Divider } = ProCard;\n\nconst getMemoryUsage = (\n  usedMemory: number,\n  totalSystemMemory: number,\n): string => {\n  if (!usedMemory) {\n    return '-';\n  }\n\n  if (!totalSystemMemory) {\n    return formatBytes(usedMemory);\n  }\n\n  return `${((usedMemory / totalSystemMemory) * 100).toFixed(2)}%`;\n};\n\nfunction byteFormatter(value: ReactText) {\n  const num: number = typeof value === 'string' ? parseInt(value) : value;\n  const formatted = isNaN(num) ? '' : formatBytes(num);\n  return <span>{formatted}</span>;\n}\n\ninterface RedisStatsProps {\n  stats: Partial<RedisInfo>;\n}\n\nexport const RedisStats: React.FC<RedisStatsProps> = ({ stats }) => {\n  const {\n    redis_version,\n    used_memory = 0,\n    total_system_memory = 0,\n    mem_fragmentation_ratio,\n    connected_clients,\n    maxmemory = 0,\n    blocked_clients,\n  } = stats || {};\n\n  const ratio = mem_fragmentation_ratio || 0;\n\n  return (\n    <ProCard.Group>\n      <ProCard>\n        <Space align=\"center\">\n          <RedisLogo />\n        </Space>\n      </ProCard>\n      <ProCard>\n        <Statistic title=\"Version\" value={redis_version} />\n      </ProCard>\n      <Divider />\n      <ProCard>\n        <Statistic\n          formatter={byteFormatter}\n          value={total_system_memory}\n          title=\"System Memory\"\n        />\n      </ProCard>\n      <Divider />\n      <ProCard>\n        <Statistic\n          formatter={byteFormatter}\n          value={used_memory}\n          title=\"Used Memory\"\n        />\n        <span>{getMemoryUsage(used_memory, total_system_memory)}</span>\n      </ProCard>\n      <Divider />\n      <ProCard>\n        <Statistic\n          value={ratio}\n          title=\"Fragmentation\"\n          precision={2}\n          suffix={'%'}\n        />\n      </ProCard>\n      <Divider />\n      <ProCard>\n        <Statistic value={connected_clients} title=\"Clients\" />\n      </ProCard>\n    </ProCard.Group>\n  );\n};\n","/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/queries.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/mutations.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/hosts/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/RedisStats/RedisLogo.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/mutations.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/utils.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/queries.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobId/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/RelativeDateFormat/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/RelativeDateFormat/RelativeDateFormat.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/number.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-controllable.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-navigation-update.tsx",["714"],"import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nexport const useNavigationUpdate = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  function updateNavigation(params: Record<string, any>, gotoUrl = false) {\n    const newQuery = new URLSearchParams(location.search);\n\n    let changed = false;\n    for (const [key, value] of Object.entries(params)) {\n      const val = `${value}`; // todo: proper serialization\n      if (newQuery.get(key) !== val) {\n        changed = true;\n        newQuery.set(key, val);\n      }\n    }\n\n    if (!changed) return;\n\n    const uri = `${location.pathname}?${newQuery.toString()}`;\n\n    if (gotoUrl) {\n      navigate(uri);\n      return;\n    }\n\n    navigate(uri, {\n      replace: false,\n      state: { ...params },\n    });\n  }\n\n  return updateNavigation;\n};\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/Highlight/Highlight.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/queues/utils.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Progress/Progress.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Details/Details.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Trash.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Promote.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/FinishedIcon.tsx",[],["715","716"],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/usePaginationQueryString.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/JsonSchemaLogo.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-details-tabs.tsx",["717"],"import { List } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { FaNotEqual, FaSadTear } from 'react-icons/fa';\nimport { Job, JobFragment, JobLogs, JobStatus } from '../api';\nimport { Highlight } from '../components/Highlight';\nimport { hash, isString, safeParse } from '../lib';\nimport { useInterval } from './use-interval';\n\nconst regularItems = ['Data', 'Options', 'Logs'];\nconst ReturnValueTabName = 'Return Value';\nconst ErrorTabName = 'Error';\n\ntype EmptyMessageProps = {\n  icon: React.ReactNode;\n  message: string;\n};\n\nconst EmptyMessage: React.FC<EmptyMessageProps> = ({ icon, message }) => {\n  const style = {\n    align: 'center',\n    justify: 'center',\n    verticalAlign: 'center',\n    opacity: '25%',\n  };\n  return (\n    <div style={style}>\n      <div>\n        <span>{icon}</span>\n        <div>\n          <pre>{message}</pre>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Logs = ({\n  job,\n  status,\n  fetchLogs,\n}: {\n  job: Job | JobFragment;\n  status: JobStatus;\n  fetchLogs: (start: number, end: number) => Promise<JobLogs>;\n}) => {\n  const [delay, setDelay] = useState<number | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [called, setCalled] = useState<boolean>(false);\n  const [startIndex, setStartIndex] = useState<number>(0);\n  const logLines = useRef<\n    {\n      text: string;\n      id: number;\n    }[]\n  >([]);\n\n  // todo: display in reverse ??\n  function loadLogs() {\n    setLoading(true);\n    fetchLogs(startIndex, -1)\n      .then((res) => {\n        setStartIndex(startIndex + res.items.length);\n        res.items.forEach((line) => {\n          logLines.current.push({\n            text: line,\n            id: hash(line),\n          });\n        });\n        setCalled(true);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  useEffect(loadLogs, []);\n\n  useEffect(() => {\n    const state = job.state || status;\n    setDelay(state === JobStatus.Active ? 3000 : null);\n  }, [status, job.state]);\n\n  useInterval(loadLogs, delay);\n\n  if (!logLines.current.length && called) {\n    return (\n      <EmptyMessage\n        icon={<FaSadTear />}\n        message={`No logs found for job ${job.name + '#' + job.id}.`}\n      />\n    );\n  }\n  return (\n    <div className=\"table-container\">\n      <List\n        dataSource={logLines.current}\n        loading={loading && !called}\n        renderItem={(item: any) => (\n          <List.Item key={item.id}>{item.text}</List.Item>\n        )}\n      />\n    </div>\n  );\n};\n\ninterface ReturnValueProps {\n  value: any;\n}\n\nconst ReturnValue: React.FC<ReturnValueProps> = ({ value }) => {\n  const hasValue = !(value === null || value === undefined);\n  if (!hasValue) {\n    value = {};\n  } else if (isString(value)) {\n    value = safeParse(value);\n  }\n  const isObj = typeof value === 'object';\n  const code = isObj ? JSON.stringify(value, null, 2) : null;\n  if (!hasValue)\n    return (\n      <EmptyMessage icon={<FaNotEqual />} message={'No results returned'} />\n    );\n\n  return (\n    <>\n      {isObj ? (\n        <Highlight language=\"json\">{code}</Highlight>\n      ) : (\n        <div>{value}</div>\n      )}\n    </>\n  );\n};\n\nexport type DetailTabInfo = {\n  title: string;\n  isActive: boolean;\n  isDisabled: boolean;\n  select: () => void;\n};\n\nexport function useDetailsTabs(\n  currentStatus: JobStatus,\n  getLogs: (start: number, end: number) => Promise<JobLogs>,\n) {\n  const [tabs, updateTabs] = useState<string[]>([]);\n  const [selectedTabIdx, setSelectedTabIdx] = useState(0);\n  const selectedTab = tabs[selectedTabIdx];\n\n  useEffect(() => {\n    let newTabs: string[] = [];\n    if (currentStatus === JobStatus.Completed) {\n      newTabs = [ReturnValueTabName];\n    } else if (currentStatus === JobStatus.Failed) {\n      newTabs = [ErrorTabName];\n    }\n    updateTabs(newTabs.concat(regularItems));\n  }, [currentStatus]);\n\n  function getDisabled(title: string): boolean {\n    if (title === ReturnValueTabName)\n      return currentStatus !== JobStatus.Completed;\n    if (title === ErrorTabName) return currentStatus !== JobStatus.Failed;\n    return false;\n  }\n\n  return {\n    tabs: tabs.map((title, index) => ({\n      title,\n      isDisabled: getDisabled(title),\n      isActive: title === selectedTab,\n      select: () => setSelectedTabIdx(index),\n    })) as DetailTabInfo[],\n    selectedTab,\n    getTabContent: (job: Job | JobFragment) => {\n      const { data, opts, failedReason, stacktrace } = job;\n      switch (selectedTab) {\n        case 'Data':\n          return (\n            <Highlight language=\"json\">\n              {JSON.stringify(data, null, 2)}\n            </Highlight>\n          );\n        case 'Options':\n          return (\n            <Highlight language=\"json\">\n              {JSON.stringify(opts, null, 2)}\n            </Highlight>\n          );\n        case 'Error':\n          return (\n            <>\n              {!failedReason && <div className=\"error\">{'NA'}</div>}\n              <Highlight language=\"stacktrace\" key=\"stacktrace\">\n                {stacktrace}\n              </Highlight>\n            </>\n          );\n        case 'Logs':\n          return <Logs job={job} status={currentStatus} fetchLogs={getLogs} />;\n        case 'Return Value': {\n          return <ReturnValue value={job?.returnvalue} />;\n        }\n        default:\n          return null;\n      }\n    },\n  };\n}\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/Highlight/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/DeleteQueueDialog.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-disclosure.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Highlight/languages/stack-trace.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/ActionIcon/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/ActionIcon/ActionIcon.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/utils.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/QueueMenu.tsx",["718"],"import { QueueActions } from '../../@types';\nimport { Queue } from '../../api';\nimport React from 'react';\nimport { Menu, Dropdown, Tooltip } from 'antd';\nimport { FaBatteryEmpty } from 'react-icons/fa';\nimport { Modal } from 'antd';\nimport { useDisclosure } from '../../hooks';\nimport DeleteQueueDialog from './DeleteQueueDialog';\n\nimport {\n  CloseOutlined,\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  PauseOutlined,\n  PlaySquareOutlined,\n  MoreOutlined,\n} from '@ant-design/icons';\nconst { confirm } = Modal;\n\ntype QueueMenuProps = {\n  queue: Queue;\n  actions: QueueActions;\n};\n\nconst QueueMenu: React.FC<QueueMenuProps> = (props) => {\n  const { queue, actions } = props;\n  const queueId = queue.id;\n  const {\n    isOpen: isDeleteDialogOpen,\n    onOpen: openDeleteDialog,\n    onClose: closeDeleteDialog,\n  } = useDisclosure({\n    defaultIsOpen: false,\n  });\n\n  function pause() {\n    return actions.pauseQueue(queueId);\n  }\n\n  function resume() {\n    return actions.resumeQueue(queueId);\n  }\n\n  async function handleDrainQueue(): Promise<void> {\n    // TODO: add a special drain Confirm dialog to capture \"delayed\" option\n    await actions.drainQueue(queueId, true);\n  }\n\n  function drain() {\n    confirm({\n      title: 'Drain Queue',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Remove all waiting or delayed jobs',\n      onOk() {\n        return handleDrainQueue();\n      },\n      onCancel() {\n        console.log('Cancel');\n      },\n    });\n  }\n\n  function remove() {\n    confirm({\n      title: 'Remove Queue',\n      icon: <ExclamationCircleOutlined />,\n      content:\n        'Non-destructively remove the queue from the host. <br/> This queue can be re-added to the interface',\n      onOk() {\n        return actions.unregisterQueue(queueId);\n      },\n      onCancel() {\n        console.log('Cancel');\n      },\n    });\n  }\n\n  async function handleDelete(): Promise<void> {\n    await actions.deleteQueue(queueId);\n  }\n\n  const iconStyle = {\n    marginRight: '3px',\n  };\n\n  const menu = (\n    <Menu>\n      {queue.isPaused ? (\n        <Menu.Item onClick={resume} key=\"queue-resume-menu-item\">\n          <PlaySquareOutlined style={iconStyle} /> Resume\n        </Menu.Item>\n      ) : (\n        <Menu.Item onClick={pause} key=\"queue-pause-menu-item\">\n          <PauseOutlined style={iconStyle} /> Pause\n        </Menu.Item>\n      )}\n      <Menu.Item onClick={drain} key=\"queue-drain-menu-item\">\n        <FaBatteryEmpty style={iconStyle} /> Drain\n      </Menu.Item>\n      <Menu.Item onClick={remove} key=\"queue-remove-menu-item\">\n        <CloseOutlined style={iconStyle} /> Remove\n      </Menu.Item>\n      <Menu.Item danger onClick={openDeleteDialog} key=\"queue-delete-menu-item\">\n        <DeleteOutlined style={iconStyle} /> Delete\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <>\n      <DeleteQueueDialog\n        queue={queue}\n        onDelete={handleDelete}\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n      />\n      <Dropdown overlay={menu} placement=\"bottomCenter\" trigger={['click']}>\n        <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n          <Tooltip title=\"Actions\">\n            <MoreOutlined />\n          </Tooltip>\n        </a>\n      </Dropdown>\n    </>\n  );\n};\n\nexport default QueueMenu;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Retry.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Button/Button.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-query-string.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/assertion.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueuePauseSwitch/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueMenu/CleanQueueDialog.tsx",["719","720","721","722","723"],"import React, { useState, useEffect } from 'react';\nimport { Form, Input, Modal, InputNumber } from 'antd';\nimport { FaClock } from 'react-icons/fa';\nimport { useDisclosure } from '../../hooks';\nimport { parseDuration } from '../../lib/dates';\nimport ms from 'ms';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\ntype CleanQueueDialogProps = {\n  queueId: string;\n  max?: number;\n  isOpen: boolean;\n  onCleanQueue: (\n    id: string,\n    gracePeriod: number,\n    limit?: number,\n  ) => Promise<void>;\n  onClose?: () => void;\n};\n\nconst DEFAULT_GRACE_PERIOD = ms('5 mins');\n\nconst CleanQueueDialog: React.FC<CleanQueueDialogProps> = (props) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [isPending, setIsPending] = useState(false);\n  const [canClean, setCanClean] = useState(false);\n  const [limit, setLimit] = useState(props.max ?? 1000);\n  const [gracePeriod, setGracePeriod] = useState(DEFAULT_GRACE_PERIOD);\n  const { queueId } = props;\n\n  function validateDuration(val: string): boolean {\n    const parsed = parseDuration(val);\n    return !isNaN(parsed);\n  }\n\n  function handleClose() {\n    props.onClose && props.onClose();\n    onClose();\n  }\n\n  function handleCleanQueue(data: Record<string, any>): void {\n    setIsPending(true);\n    Promise.resolve(props.onCleanQueue(queueId, gracePeriod, limit)).finally(\n      () => {\n        setIsPending(false);\n        handleClose();\n      },\n    );\n  }\n\n  useEffect(() => {\n    if (props.isOpen) {\n      onOpen();\n    } else {\n      handleClose();\n    }\n  }, [props.isOpen]);\n\n  useEffect(() => {}, [limit]);\n\n  const onLimitChange = (value: string | number | null | undefined) => {\n    const newNumber = parseInt(String(value ?? '0'), 10);\n    if (Number.isNaN(newNumber)) {\n      return;\n    }\n    setLimit(newNumber);\n    // triggerChange({ number: newNumber });\n  };\n\n  function onGracePeriodChange(e: React.FormEvent<HTMLInputElement>) {\n    const newNumber = parseInt(e.currentTarget.value || '0', 10);\n    if (Number.isNaN(newNumber)) {\n      return;\n    }\n    setGracePeriod(newNumber);\n  }\n\n  return (\n    <Modal\n      title=\"Clean Queue\"\n      visible={isOpen}\n      okText={isPending ? 'Cleaning...' : 'Save'}\n      okButtonProps={{\n        disabled: !canClean,\n      }}\n      onOk={handleCleanQueue}\n      onCancel={handleClose}\n      confirmLoading={isPending}\n    >\n      <p>Clean Queue? You can't undo this action afterwards.</p>\n      <Form>\n        <Form.Item\n          label=\"Grace Period\"\n          rules={[\n            { required: true },\n            ({ getFieldValue }) => ({\n              validator(rule, value) {\n                if (!value || getFieldValue('grace') === value) {\n                  return Promise.resolve();\n                }\n                const duration = parseDuration(value);\n                return Promise.reject(\n                  'The two passwords that you entered do not match!',\n                );\n              },\n            }),\n          ]}\n        >\n          <Input\n            addonBefore={<FaClock />}\n            name=\"grace\"\n            onChange={onGracePeriodChange}\n          />\n        </Form.Item>\n        <Form.Item label=\"Limit\">\n          <InputNumber defaultValue={1000} min={1} onChange={onLimitChange} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default CleanQueueDialog;\n",["724","725"],"/Users/ccollie/WebstormProjects/toro-ui/src/api/jobs/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/function.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueuePauseSwitch/QueuePauseSwitch.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobList/JobActions.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/JobCard.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobCard/Timeline/Timeline.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/dates.ts",["726"],"import {\n  format,\n  formatDistance,\n  formatDistanceStrict,\n  isSameYear,\n  isToday,\n  parseJSON,\n  toDate,\n} from 'date-fns';\nimport ms from 'ms';\nimport prettyMilliseconds from 'pretty-ms';\nimport closestTo from 'date-fns/closestTo';\nimport subMilliseconds from 'date-fns/subMilliseconds';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport startOfDay from 'date-fns/startOfDay';\nimport startOfHour from 'date-fns/startOfHour';\nimport startOfMinute from 'date-fns/startOfMinute';\nimport startOfSecond from 'date-fns/startOfSecond';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport endOfDay from 'date-fns/endOfDay';\nimport endOfHour from 'date-fns/endOfHour';\nimport endOfMinute from 'date-fns/endOfMinute';\nimport endOfSecond from 'date-fns/endOfSecond';\n\nconst ONE_SECOND = 1000;\nconst ONE_MINUTE = ONE_SECOND * 60;\nconst ONE_HOUR = ONE_MINUTE * 60;\nconst ONE_DAY = ONE_HOUR * 24;\nconst ONE_WEEK = ONE_DAY * 7;\nconst ONE_MONTH = ONE_WEEK * 4;\n\nexport interface Timespan {\n  start: Date;\n  end: Date;\n}\n\nconst config = {\n  units: ['minutes', 'hours', 'days', 'weeks', 'months'],\n  granularity: ['second', 'minute', 'hour', 'hour', 'day'],\n  tickCount: [60, 60, 24, 7 * 24, 30],\n  interval: [ONE_MINUTE, ONE_HOUR, ONE_DAY, ONE_WEEK, ONE_MONTH],\n};\n\nfunction getUnitIndex(unit: string): number {\n  for (let i = 0; i < config.units.length; i++) {\n    if (config.units[i] === unit || unit.startsWith(config.units[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function getUnit(interval: number): string {\n  // round to 5 secs to handle right open range\n  const rounded = interval + 5 - (interval % 5);\n  const asString = ms(rounded, { long: true });\n  const [, unit] = asString.split(' ');\n  return unit;\n}\n\nexport type DateLike = Date | number;\n\nexport function parseDate(ts: unknown): Date {\n  const type = typeof ts;\n  if (type === 'number' || type === 'string') {\n    return parseJSON(ts as string);\n  } else if (type === 'undefined') {\n    return new Date();\n  } else {\n    return toDate(ts as any);\n  }\n}\n\nexport function formatDate(ts: unknown): string {\n  if (ts === undefined || ts === null) {\n    return '';\n  }\n  const date = parseDate(ts);\n  if (isToday(date)) {\n    return format(date, 'HH:mm:ss');\n  }\n  const today = new Date();\n  return isSameYear(date, today)\n    ? format(date, 'MMM dd HH:mm:ss')\n    : format(date, 'MMM dd, yyyy HH:mm:ss');\n}\n\nexport function formatDuration(duration: number | null): string {\n  return duration ? prettyMilliseconds(duration) : '';\n}\n\nexport function relativeFormat(\n  value: DateLike,\n  from?: DateLike,\n  verbose = false,\n): string {\n  const now = toDate(from || new Date());\n  const val = new Date(value);\n  const suffix = val < now ? 'ago' : 'from now';\n\n  const formattedValue = verbose\n    ? formatDistance(val, now)\n    : formatDistanceStrict(val, now);\n  return `${formattedValue} ${suffix}`;\n}\n\nexport function parseDuration(val: string | number): number {\n  if (typeof val === 'number') {\n    return val;\n  }\n  const parsed = parseInt(val, 10);\n  if (!isNaN(parsed)) return parsed;\n  try {\n    return ms(val);\n  } catch {\n    return NaN;\n  }\n}\n\nfunction normalizeUnit(str: string): string {\n  const type = (str || 'seconds').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return 'year';\n    case 'quarters':\n    case 'quarter':\n    case 'q':\n      return 'quarter';\n    case 'months':\n    case 'month':\n    case 'mnth':\n      return 'month';\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return 'week';\n    case 'days':\n    case 'day':\n    case 'd':\n      return 'day';\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return 'hour';\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return 'minute';\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return 'second';\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return 'millisecond';\n    default:\n      return str;\n  }\n}\n\nexport function getParentUnit(unit: string): string {\n  if (!unit) return 'minutes';\n  switch (unit) {\n    case 'seconds':\n    case 'second':\n      return 'minute';\n    case 'minutes':\n    case 'minute':\n      return 'hours';\n    case 'hours':\n    case 'hour':\n      return 'days';\n    case 'days':\n    case 'day':\n      return 'weeks';\n    case 'weeks':\n    case 'week':\n      return 'months';\n    default:\n      return 'years';\n  }\n}\n\nexport function startOf(date: DateLike, unit: string): Date {\n  unit = normalizeUnit(unit);\n  switch (unit) {\n    case 'month':\n      return startOfMonth(date);\n    case 'week':\n      return startOfWeek(date);\n    case 'day':\n      return startOfDay(date);\n    case 'hour':\n      return startOfHour(date);\n    case 'minute':\n      return startOfMinute(date);\n    case 'second':\n      return startOfSecond(date);\n  }\n  return toDate(date);\n}\n\nexport function endOf(date: DateLike, unit: string): Date {\n  unit = normalizeUnit(unit);\n  switch (unit) {\n    case 'month':\n      return endOfMonth(date);\n    case 'week':\n      return endOfWeek(date);\n    case 'day':\n      return endOfDay(date);\n    case 'hour':\n      return endOfHour(date);\n    case 'minute':\n      return endOfMinute(date);\n    case 'second':\n      return endOfSecond(date);\n  }\n  return toDate(date);\n}\n\nfunction getEndOfPrevious(unit: string, date?: DateLike): Date {\n  if (!date) date = new Date();\n  return subMilliseconds(startOf(date, unit), 1);\n}\n\nexport function calculateTicks(interval: number): number {\n  const unit = getUnit(interval);\n  const currentIndex = getUnitIndex(unit);\n  if (currentIndex > 0) {\n    return config.tickCount[currentIndex];\n  }\n  // find next higher unit\n  const nextIndex = getUnitIndex(unit);\n  if (nextIndex >= 0) {\n    const nextInterval = config.interval[nextIndex];\n    const currInterval = config.interval[currentIndex];\n    return Math.floor(nextInterval / currInterval);\n  }\n  return 60;\n}\n\nexport function roundUp(ts: DateLike, interval: number): Date {\n  const base = typeof ts === 'number' ? ts : ts.getTime();\n  const next = base + interval - (base % interval);\n  return new Date(next);\n}\n\nexport function roundDown(ts: DateLike, interval: number): Date {\n  const base = typeof ts === 'number' ? ts : ts.getTime();\n  const next = base - (base % interval);\n  return new Date(next);\n}\n\nexport function roundToNearest(date: DateLike, precision: number): Date {\n  const up = roundUp(date, precision);\n  const down = roundDown(date, precision);\n  return closestTo(date, [up, down]);\n}\n\nexport function convertUTCDateToLocalDate(date: DateLike): Date {\n  date = toDate(date);\n  const newDate = new Date(\n    date.getTime() + date.getTimezoneOffset() * 60 * 1000,\n  );\n\n  const offset = date.getTimezoneOffset() / 60;\n  const hours = date.getHours();\n\n  newDate.setHours(hours - offset);\n\n  return newDate;\n}\n","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-interval.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobId/JobId.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/providers/AntConfigProvider.tsx",["727","728"],"import enUS from 'antd/lib/locale/en_US';\nimport zhCN from 'antd/lib/locale/zh_CN';\n\nimport { ConfigProvider } from 'antd';\nimport React, { useState } from 'react';\n\nconst AntConfigProvider: React.FC = ({ children }) => {\n  const [locale, setLocale] = useState(enUS);\n  return <ConfigProvider locale={locale}>{children}</ConfigProvider>;\n};\n\nexport default AntConfigProvider;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/StatusMenu/StatusMenu.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/Bar/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/Pie/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/StatsLineChart/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/StatsLineChart/StatsLineChart.tsx",["729","730"],"import ms from 'ms';\nimport React, { useCallback, useMemo } from 'react';\nimport { StatsGranularity, StatsSnapshot } from '../../../api';\nimport {\n  BackgroundColor,\n  formatDate,\n  getStatsChartData,\n  TickValues,\n} from '../chart-utils';\nimport { AreaChart } from 'bizcharts';\n\ninterface StatsLineChartProps {\n  height?: number;\n  fields?: string[];\n  granularity?: StatsGranularity;\n  data?: StatsSnapshot[];\n}\n\nconst StatsLineChart: React.FC<StatsLineChartProps> = (props) => {\n  const {\n    data = [],\n    fields = ['mean', 'median', 'p90', 'p95'],\n    height = 400,\n    granularity,\n  } = props;\n\n  const dateFormatter = useCallback((date) => formatDate(date, granularity), [\n    granularity,\n  ]);\n\n  const valueFormatter = useCallback((value) => ms(value), []);\n\n  const chartData = useMemo(() => getStatsChartData(data, fields), [\n    data,\n    fields,\n  ]);\n\n  return (\n    <AreaChart\n      meta={{\n        value: {\n          formatter: valueFormatter,\n        },\n        start: {\n          alias: 'Time',\n          type: 'time',\n          formatter: dateFormatter,\n        },\n      }}\n      height={height}\n      data={chartData}\n      xField=\"start\"\n      yField=\"value\"\n      seriesField=\"metric\"\n      forceFit\n    />\n  );\n};\n\nexport default StatsLineChart;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniBar/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/StatusMenu/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/ScheduledJobs.tsx",["731","732","733"],"import { DeleteOutlined } from '@ant-design/icons';\nimport React, {\n  Fragment,\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n  useMemo,\n} from 'react';\nimport { Space, Table, Tooltip } from 'antd';\nimport { ColumnsType, TablePaginationConfig } from 'antd/es/table';\nimport {\n  RepeatableJob,\n  getRepeatableJobs,\n  normalizeJobName,\n  deleteRepeatableJobByKey,\n} from '../api';\nimport { useParams } from 'react-router';\nimport { ActionIcon, JobId } from '../components';\nimport { RelativeDateFormat } from '../components/RelativeDateFormat';\nimport { FaCalendar } from 'react-icons/fa';\nimport { ClockCircleOutlined } from '@ant-design/icons';\nimport { formatDate } from '../lib/dates';\nimport { parseJSON } from 'date-fns';\nimport {\n  useInterval,\n  useNavigationUpdate,\n  usePaginationQueryString,\n} from '../hooks';\n\nconst columns: ColumnsType<RepeatableJob> = [\n  {\n    title: 'Key',\n    dataIndex: 'key',\n    render: (key: string) => {\n      return (\n        <Tooltip arrowPointAtCenter title={key} aria-label={key}>\n          <span>{key}</span>\n        </Tooltip>\n      );\n    },\n  },\n  {\n    title: 'Id',\n    dataIndex: 'id',\n    render: (id: string) => {\n      if (!id) return null;\n      return <JobId id={id} />;\n    },\n  },\n  {\n    title: 'Job Name',\n    dataIndex: 'name',\n    render: (_: string, job: RepeatableJob) => (\n      <Fragment>{normalizeJobName(job)}</Fragment>\n    ),\n  },\n  {\n    title: 'End Date',\n    dataIndex: 'endDate',\n    render: (_, job: RepeatableJob) => {\n      const val = _ ? parseJSON(_) : null;\n      if (val) {\n        return <RelativeDateFormat value={val} icon={<FaCalendar />} />;\n      }\n    },\n  },\n  {\n    title: 'Cron',\n    dataIndex: 'cron',\n    render: (text: string, job: RepeatableJob) => (\n      <Tooltip placement=\"top\" arrowPointAtCenter title={job.descr}>\n        <span>{text}</span>\n      </Tooltip>\n    ),\n  },\n  {\n    title: 'Next',\n    dataIndex: 'next',\n    render: (text: string, job: RepeatableJob) => (\n      <Space>\n        <ClockCircleOutlined />\n        {formatDate(new Date(job.next || 0))}\n      </Space>\n    ),\n  },\n  {\n    title: 'Timezone',\n    dataIndex: 'tz',\n  },\n];\n\ntype DeleteFunction = (key: string) => Promise<void>;\n\nfunction DeleteIcon({\n  jobKey,\n  onDelete,\n}: {\n  jobKey: string;\n  onDelete: DeleteFunction;\n}) {\n  const onClick = useCallback(() => onDelete(jobKey), [jobKey]);\n  return (\n    <ActionIcon\n      key={`del-${jobKey}`}\n      handler={onClick}\n      confirmPrompt=\"Are you sure you want to delete this job?\"\n      baseIcon={<DeleteOutlined />}\n    />\n  );\n}\n\nfunction getColumns(onDelete: DeleteFunction): ColumnsType<RepeatableJob> {\n  const cols = [...columns];\n  cols.push({\n    title: 'Actions',\n    dataIndex: 'key',\n    align: 'right',\n    key: 'actions',\n    width: 50,\n    render: (_) => <DeleteIcon jobKey={_} onDelete={onDelete} />,\n  });\n\n  return cols;\n}\n\nexport const ScheduledJobs: React.FC = () => {\n  const { queueId } = useParams();\n  // eslint-disable-next-line prefer-const\n  let { page = 1, pageSize = 10 } = usePaginationQueryString();\n\n  const [data, setData] = useState<RepeatableJob[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [called, setCalled] = useState(false);\n  const pagination = useRef<{\n    current: number;\n    pageSize: number;\n    total: number;\n  }>({\n    current: page,\n    pageSize,\n    total: 0,\n  });\n\n  const updateNavigation = useNavigationUpdate();\n\n  function handleDelete(key: string): Promise<void> {\n    return deleteRepeatableJobByKey(queueId, key).then(() => {\n      // todo: refresh\n      fetch();\n    });\n  }\n\n  const columns = useMemo(() => getColumns(handleDelete), [queueId]);\n\n  function fetchJobs(pageNumber: number, pageSize: number): void {\n    if (loading) return;\n    const { current } = pagination;\n    setLoading(true);\n    getRepeatableJobs(queueId, pageNumber, pageSize)\n      .then(({ count, jobs }) => {\n        setCalled(true);\n        setData(jobs);\n        current.current = page;\n        current.pageSize = pageSize;\n        current.total = count;\n        updateNavigation({ page: pageNumber, pageSize });\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }\n\n  function handleTableChange(\n    params: TablePaginationConfig,\n    filters: any,\n    sorter: any,\n  ) {\n    const pageSize = params.pageSize || pagination.current.pageSize;\n    fetchJobs(params.current || pagination.current.current, pageSize);\n  }\n\n  function fetch() {\n    const { current, pageSize } = pagination.current;\n    if (!loading && called) {\n      fetchJobs(current, pageSize);\n    }\n  }\n\n  useEffect(() => {\n    const { current, pageSize } = pagination.current;\n    if (!loading) {\n      fetchJobs(current, pageSize);\n    }\n  }, []);\n\n  useInterval(fetch, 3000);\n\n  return (\n    <div>\n      <Table<RepeatableJob>\n        rowKey=\"key\"\n        dataSource={data}\n        columns={columns}\n        loading={loading}\n        pagination={pagination.current}\n        onChange={handleTableChange}\n      />\n    </div>\n  );\n};\n\nexport default ScheduledJobs;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Workers.tsx",["734"],"import { ClockCircleOutlined } from '@ant-design/icons';\nimport { Table, Tooltip, Space } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { parseJSON } from 'date-fns';\nimport React, { useState, useEffect } from 'react';\nimport { FaCalendar } from 'react-icons/fa';\nimport { QueueWorker, GetQueueWorkersDocument } from '../api';\nimport { RelativeDateFormat } from '../components/RelativeDateFormat';\nimport { formatDuration } from '../lib/dates';\nimport { useParams } from 'react-router';\nimport { useQuery } from '@apollo/client';\n\nconst columns: ColumnsType<QueueWorker> = [\n  {\n    title: 'Id',\n    dataIndex: 'id',\n    render: (key: string) => {\n      return (\n        <Tooltip arrowPointAtCenter title={key} aria-label={key}>\n          <span>{key}</span>\n        </Tooltip>\n      );\n    },\n  },\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Addr',\n    dataIndex: 'addr',\n  },\n  {\n    title: 'Started',\n    dataIndex: 'endDate',\n    render: (_: string, worker: QueueWorker) => {\n      const value = worker.started;\n      if (!value) return value;\n      return (\n        <RelativeDateFormat value={parseJSON(value)} icon={<FaCalendar />} />\n      );\n    },\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    render: (text: string, worker: QueueWorker) => {\n      const value = worker?.age;\n      if (!value) return value;\n      return formatDuration(value);\n    },\n  },\n  {\n    title: 'Idle',\n    dataIndex: 'idle',\n    render: (text: string, worker: QueueWorker) => {\n      const value = worker?.idle;\n      if (!value) return value;\n      const val = formatDuration(value);\n      return (\n        <Space>\n          <ClockCircleOutlined />\n          <span>{val}</span>\n        </Space>\n      );\n    },\n  },\n];\n\nconst Workers: React.FC = () => {\n  const { queueId } = useParams();\n  const [workers, setWorkers] = useState<QueueWorker[]>([]);\n\n  const { loading, data, error } = useQuery(GetQueueWorkersDocument, {\n    variables: { id: queueId },\n    pollInterval: 5000,\n  });\n\n  useEffect(() => {\n    if (data && !loading) {\n      const _workers = (data?.queue?.workers || []) as QueueWorker[];\n      setWorkers(_workers);\n    }\n  }, [data, loading]);\n\n  return (\n    <Table<QueueWorker>\n      rowKey=\"id\"\n      columns={columns}\n      dataSource={workers}\n      loading={loading}\n    />\n  );\n};\n\nexport default Workers;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Rules.tsx",["735","736","737","738"],"import { PageHeader, Space, Typography } from 'antd';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Button } from 'antd';\nimport { FaBolt, FaPlus } from 'react-icons/fa';\nimport { NotificationChannel, Queue } from '../api';\nimport { getHostChannels, getQueueById } from '../api';\nimport { useDisclosure } from '../hooks';\nconst { Title } = Typography;\n\nconst Rules: React.FC = () => {\n  const { queueId } = useParams();\n  const {\n    isOpen: isAddRuleDialogOpen,\n    onOpen: openAddRuleDialog,\n    onClose: closeAddRuleDialog,\n  } = useDisclosure();\n  const [queue, setQueue] = useState<Queue>();\n  const [channels, setChannels] = useState<NotificationChannel[]>();\n\n  function loadQueue() {\n    getQueueById(queueId).then((q) => {\n      setQueue(q);\n    });\n  }\n\n  useEffect(() => {\n    loadQueue();\n  }, [queueId]);\n\n  useEffect(() => {\n    getHostChannels(queueId).then(setChannels);\n  }, [queueId]);\n\n  if (!queue) {\n    return <span>Rules: Nothing here Yet.</span>;\n  }\n\n  return (\n    <Fragment>\n      <PageHeader title=\"Rules\">\n        <div>\n          <Space>\n            <FaBolt /> <Title level={3}>Rules</Title>\n          </Space>\n          <Space>\n            <Button icon={<FaPlus />} onClick={openAddRuleDialog}>\n              Add Rule\n            </Button>\n          </Space>\n        </div>\n      </PageHeader>\n    </Fragment>\n  );\n};\n\nexport default Rules;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/NumberInfo/NumberInfo.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/AsyncButton/AsyncButton.tsx",["739"],"// Modified from https://github.com/selvagsz/react-async-button\nimport React, { ReactNode } from 'react';\nimport { Button } from 'antd';\nimport classNames from 'classnames';\nimport { useAsync, AsyncState } from '../../hooks';\n\ninterface AsyncButtonProps {\n  className?: string;\n  loadingClass?: string;\n  fulFilledClass?: string;\n  rejectedClass?: string;\n  disabled?: boolean;\n  text?: string;\n  pendingText?: string;\n  fulFilledText?: string;\n  rejectedText?: string;\n  icon?: ReactNode;\n  danger?: boolean;\n  ghost?: boolean;\n  onClick?: (...args: any[]) => void | Promise<void>;\n}\n\nconst AsyncButton: React.FC<AsyncButtonProps> = (props) => {\n  const { execute, status } = useAsync(props.onClick || noop);\n\n  function noop() {}\n\n  const {\n    children,\n    text,\n    pendingText,\n    fulFilledText,\n    rejectedText,\n    className = '',\n    loadingClass = 'AsyncButton--loading',\n    fulFilledClass = 'AsyncButton--fulfilled',\n    rejectedClass = 'AsyncButton--rejected',\n    disabled,\n    ...attributes\n  } = props;\n\n  const isPending = status === AsyncState.PENDING;\n  const isFulfilled = status === AsyncState.SUCCESS;\n  const isRejected = status === AsyncState.ERROR;\n  const isDisabled = disabled || isPending;\n  let buttonText: ReactNode;\n\n  if (isPending) {\n    buttonText = pendingText;\n  } else if (isFulfilled) {\n    buttonText = fulFilledText;\n  } else if (isRejected) {\n    buttonText = rejectedText;\n  }\n  buttonText = buttonText || text || 'Confirm';\n\n  function renderChildren() {\n    const filhos = children || buttonText;\n    if (typeof children === 'function')\n      return children({\n        buttonText,\n        isPending,\n        isFulfilled,\n        isRejected,\n      });\n    return { filhos };\n  }\n\n  return (\n    <Button\n      {...attributes}\n      className={classNames(className, {\n        [loadingClass]: isPending,\n        [fulFilledClass]: isFulfilled,\n        [rejectedClass]: isRejected,\n      })}\n      disabled={isDisabled}\n      loading={isPending}\n      onClick={(event: any) => execute(event)}\n    >\n      {typeof children === 'function'\n        ? children({\n            buttonText,\n            isPending,\n            isFulfilled,\n            isRejected,\n          })\n        : children || buttonText}\n    </Button>\n  );\n};\n\nexport default AsyncButton;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/Field/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Trend/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/AsyncButton/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/autoHeight.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniProgress/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/HostCard/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniArea/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/MiniChartCard/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/NumberInfo/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-store.tsx",["740","741"],"import React, { useEffect, createContext, useContext } from 'react';\nimport { QueueActions } from '../@types/actions';\nimport {\n  AppInfo,\n  GetAppInfoDocument,\n  GetHostsAndQueuesDocument,\n  Queue,\n  QueueHost,\n} from '../api';\nimport { useApolloClient } from '@apollo/client';\nimport { useQueueActions } from './use-queue-actions';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst Noop = () => {};\n\ntype State = {\n  app: AppInfo;\n  hosts: QueueHost[];\n  selectedHost: QueueHost | null;\n  selectedQueue: Queue | null;\n  loading: boolean;\n  setSelectedHost: (host: QueueHost | string | null) => void;\n  setSelectedQueue: (queue: Queue | string | null) => void;\n};\n\nexport interface Store {\n  state: State;\n  fetchHosts(): Promise<QueueHost[]>;\n  actions: QueueActions;\n}\n\nconst InitialState: State = {\n  app: {\n    env: 'dev',\n    title: 'Toro',\n    version: '0.1',\n  },\n  hosts: [],\n  selectedHost: null,\n  selectedQueue: null,\n  loading: false,\n  setSelectedHost: Noop,\n  setSelectedQueue: Noop,\n};\n\nexport const StateContext = createContext(InitialState);\n\ninterface Meta {\n  refCount: number;\n  timeout?: NodeJS.Timeout;\n  hasLoaded: boolean;\n  appInfoLoaded: boolean;\n  loadingAppInfo: boolean;\n  isLoading: boolean;\n}\n\nconst MetaContext = createContext<Meta>({\n  appInfoLoaded: false,\n  hasLoaded: false,\n  refCount: 0,\n  timeout: undefined,\n  loadingAppInfo: false,\n  isLoading: false,\n});\n\nexport const useStore = (): Store => {\n  const actions = useQueueActions();\n  const state = useContext(StateContext);\n  const meta = useContext(MetaContext);\n\n  if (!state) {\n    throw new Error('useItemData must be used within a StoreProvider tag');\n  }\n\n  const client = useApolloClient();\n\n  function loadAppInfo() {\n    if (!meta.appInfoLoaded) {\n      if (meta.loadingAppInfo) return;\n      meta.loadingAppInfo = true;\n      // state.loading = true;\n\n      client\n        .query({\n          query: GetAppInfoDocument,\n        })\n        .then((result) => {\n          if (result.error) throw result.error;\n          if (result.data) {\n            state.app = result.data?.appInfo as AppInfo;\n          }\n          meta.appInfoLoaded = true;\n        })\n        .finally(() => {\n          meta.loadingAppInfo = false;\n        });\n    }\n  }\n\n  async function fetchHosts(): Promise<QueueHost[]> {\n    if (!meta.hasLoaded) {\n      state.loading = true;\n    }\n    try {\n      const result = await client.query({\n        query: GetHostsAndQueuesDocument,\n      });\n      if (result.error) throw result.error;\n      state.hosts = (result.data?.hosts ?? []) as QueueHost[];\n      meta.hasLoaded = true;\n      return state.hosts;\n    } catch (e) {\n      // todo: toast\n      console.log(e);\n      throw e;\n    } finally {\n      state.loading = false;\n    }\n  }\n\n  useEffect(() => {\n    loadAppInfo();\n  }, []);\n\n  useEffect(() => {\n    state.setSelectedHost(state.selectedHost);\n  }, [state.hosts]);\n\n  return {\n    state,\n    fetchHosts,\n    actions,\n  };\n};\n\nexport const StoreProvider: React.FC = ({ children }) => {\n  const state = useContext(StateContext);\n\n  function findHost(host: QueueHost | string): QueueHost | null {\n    const id = typeof host === 'string' ? host : host.id;\n    const found = state.hosts?.find((x) => x.id === id);\n    return found ?? null;\n  }\n\n  state.setSelectedHost = (host: QueueHost | string | null): void => {\n    if (host === null) {\n      state.selectedHost = null;\n    } else {\n      state.selectedHost = findHost(host);\n    }\n  };\n\n  state.setSelectedQueue = (queue: Queue | string | null): void => {\n    const id = typeof queue === 'string' ? queue : queue?.id;\n    let host: QueueHost | null = null;\n    let found: Queue | null = null;\n    const hosts = state.hosts || [];\n    for (let i = 0; i < hosts.length; i++) {\n      host = hosts[i];\n      const val = (host.queues || []).find((x) => x.id === id);\n      if (val) {\n        found = val;\n        break;\n      }\n    }\n    state.selectedQueue = found;\n    if (found) state.selectedHost = host;\n  };\n\n  return (\n    <StateContext.Provider value={state}>{children}</StateContext.Provider>\n  );\n};\n","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-async.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/JobCountsPieChart/index.tsx",["742","743"],"import { DonutChart } from 'bizcharts';\nimport React, { useState } from 'react';\nimport { JobStatus } from '../../../api';\nimport { Empty, Space } from 'antd';\n\ntype PieChartDataProps = {\n  height?: number;\n  counts: { [key in JobStatus]: number };\n  onClick?: (status: JobStatus, value?: number) => void;\n};\n\nconst Colors = {\n  [JobStatus.Waiting + '']: 'hsl(32, 70%, 50%)',\n  [JobStatus.Active + '']: 'hsl(22, 70%, 50%)',\n  [JobStatus.Completed + '']: 'hsl(132, 70%, 50%)',\n  [JobStatus.Failed + '']: 'hsl(345, 70%, 50%)',\n  [JobStatus.Paused + '']: 'hsl(345, 70%, 50%)',\n  [JobStatus.Delayed + '']: 'hsl(292, 70%, 50%)',\n};\n\ninterface DataPoint {\n  status: string;\n  value: number;\n  color?: string;\n}\n\nfunction normalizeData(props: PieChartDataProps): DataPoint[] {\n  const data: DataPoint[] = [];\n  Object.entries(props.counts).forEach(([status, value]) => {\n    const color = Colors[status];\n    if (status === '__typename') return;\n    data.push({\n      status,\n      value, //ts couldn't infer this\n      color,\n    });\n  });\n  return data;\n}\n\nfunction arePropsEqual(a: PieChartDataProps, b: PieChartDataProps): boolean {\n  if (a.height !== b.height) return false;\n  if (a.onClick !== b.onClick) return false;\n  const keys = Object.keys(Colors);\n  for (let i = 0; i < keys.length; i++) {\n    const k = keys[i];\n    if ((a.counts as any)[k] !== (b.counts as any)[k]) return false;\n  }\n  return true;\n}\n\nconst JobCountsPieChart: React.FC<PieChartDataProps> = (props) => {\n  const { height } = props;\n  const [data, setData] = useState<DataPoint[]>(normalizeData(props));\n  let total = data.reduce((result, point) => result + point.value, 0);\n\n  function handleClick(evt: any) {\n    const status = evt.status as JobStatus;\n    props.onClick && props.onClick(status, evt.value);\n  }\n\n  return (\n    <div\n      style={{\n        textAlign: 'center',\n        cursor: 'pointer',\n        fontFamily: 'sans-serif',\n      }}\n    >\n      {total ? (\n        <DonutChart\n          data={data}\n          height={height}\n          radius={0.8}\n          padding=\"auto\"\n          forceFit\n          angleField=\"value\"\n          colorField=\"status\"\n          label={{\n            visible: true,\n            type: 'outer-center',\n          }}\n          statistic={{\n            title: {\n              formatter: () => 'Total',\n            },\n          }}\n        />\n      ) : (\n        <Space align=\"center\" style={{ height: height }}>\n          <Empty description={<span>No Jobs Available</span>} />\n        </Space>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(JobCountsPieChart, arePropsEqual);\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/index.tsx",["744","745","746"],"import { Button, PageHeader, Space, Tag } from 'antd';\nimport React, {\n  Fragment,\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n} from 'react';\nimport { QueueFilter } from '../../@types/queue';\nimport { Queue, RedisInfo, HostPageQueryDocument, QueueHost } from '../../api';\n\nimport { useParams } from 'react-router';\nimport { useQuery } from '@apollo/client';\nimport { QueueFilterToolbar } from '../../components/QueueFilterToolbar';\nimport QueueCard from './QueueCard';\nimport { RedisStats } from '../../components';\nimport RedisIcon from '../../components/Icons/Redis';\nimport { PlusOutlined, CloudServerOutlined } from '@ant-design/icons';\nimport {\n  useDisclosure,\n  useNavigationUpdate,\n  useQueueActions,\n  useQueueFilterParams,\n} from '../../hooks';\nimport RegisterQueueDialog from './RegisterQueueDialog';\n\nconst Host: React.FC = () => {\n  const { hostId: id } = useParams();\n  const [host, setHost] = useState<QueueHost | null>(null);\n  const [queues, setQueues] = useState<Queue[]>([]);\n  const [name, setName] = useState('host');\n  const [range, setRange] = useState('last_hour');\n  const filter = useRef(useQueueFilterParams());\n  let actions = useQueueActions();\n\n  const {\n    isOpen: isAddQueueOpen,\n    onOpen: openAddDialog,\n    onClose: closeAddDialog,\n  } = useDisclosure({\n    defaultIsOpen: false,\n  });\n\n  const { isOpen: isRedisStatsOpen, onToggle: toggleRedisInfo } = useDisclosure(\n    {\n      defaultIsOpen: false,\n    },\n  );\n\n  const updateNavigation = useNavigationUpdate();\n\n  const { loading, data: hostData, error: hostError, called } = useQuery(\n    HostPageQueryDocument,\n    {\n      variables: { id, range },\n      pollInterval: 5000,\n    },\n  );\n\n  useEffect(() => {\n    if (hostData && !loading) {\n      const _host = hostData?.host || null;\n      setHost(_host as QueueHost);\n      setName(_host?.name || 'host');\n      updateQueues((_host?.queues ?? []) as Queue[]);\n    }\n  }, [loading, hostData]);\n\n  function updateQueues(newItems: Queue[]): void {\n    // todo: filter and sort\n    setQueues(newItems);\n  }\n\n  function onQueueAdded(queue: Queue) {\n    const newItems = [...queues, queue];\n    updateQueues(newItems);\n  }\n\n  function handleDiscoverQueues() {\n    return actions.discoverQueues(id);\n  }\n\n  function handleAddQueue(prefix: string, name: string): Promise<Queue> {\n    return actions.registerQueue(id, prefix, name).then((queue) => {\n      onQueueAdded(queue);\n      return queue;\n    });\n  }\n\n  function onQueueRemoved(id: string) {\n    const newItems = queues.filter((q) => q.id !== id);\n    updateQueues(newItems);\n  }\n\n  function handleRemoveQueue(id: string): Promise<boolean> {\n    return actions.unregisterQueue(id).then((removed) => {\n      if (removed) {\n        onQueueRemoved(id);\n      }\n      return removed;\n    });\n  }\n\n  async function handleDeleteQueue(id: string) {\n    const count = await actions.deleteQueue(id);\n    onQueueRemoved(id);\n    return count;\n  }\n\n  async function handleDrainQueue(id: string, delayed?: boolean) {\n    return actions.drainQueue(id, delayed);\n    // todo: do something with the result\n  }\n\n  async function handlePauseQueue(id: string) {\n    return actions.pauseQueue(id);\n  }\n\n  async function handleResumeQueue(id: string) {\n    return actions.resumeQueue(id);\n  }\n\n  actions = {\n    ...actions,\n    deleteQueue: handleDeleteQueue,\n    drainQueue: handleDrainQueue,\n    pauseQueue: handlePauseQueue,\n    resumeQueue: handleResumeQueue,\n    unregisterQueue: handleRemoveQueue,\n  };\n\n  function Tags() {\n    let color = 'blue';\n    let state = 'Active';\n    if (!host) {\n      color = 'red';\n      state = 'Unreachable';\n    }\n    return <Tag color={color}>{state}</Tag>;\n  }\n\n  const onFilterUpdate = useCallback(function onFilterUpdated(\n    filter: QueueFilter,\n  ) {\n    console.log('Filter updated');\n    updateNavigation({\n      ...filter,\n    });\n  },\n  []);\n\n  const toolbar = (\n    <Space key=\"header-toolbar\">\n      <QueueFilterToolbar\n        filter={filter.current}\n        onFilterUpdated={onFilterUpdate}\n      />\n      <Button\n        type=\"primary\"\n        icon={<PlusOutlined />}\n        key=\"add-queue-btn\"\n        onClick={openAddDialog}\n      >\n        Add Queue\n      </Button>\n      <RedisIcon\n        size={24}\n        onClick={toggleRedisInfo}\n        style={{ marginTop: '5px', cursor: 'pointer' }}\n      />\n    </Space>\n  );\n\n  return (\n    <Fragment>\n      <div>\n        <PageHeader\n          title={name}\n          ghost={true}\n          tags={<Tags />}\n          extra={[toolbar]}\n          avatar={{\n            icon: <CloudServerOutlined />,\n          }}\n        />\n        {isRedisStatsOpen && <RedisStats stats={host?.redis as RedisInfo} />}\n      </div>\n      {hostError ? (\n        <div>Error loading host #{id}</div>\n      ) : (\n        <Space size={[8, 4]} align=\"start\" wrap>\n          {queues.map((queue) => (\n            <QueueCard\n              key={`q-${queue.id}`}\n              queue={queue}\n              stats={queue.stats}\n              statsSummary={queue.statsAggregate}\n              actions={actions}\n            />\n          ))}\n        </Space>\n      )}\n      <RegisterQueueDialog\n        visible={isAddQueueOpen}\n        loadQueues={handleDiscoverQueues}\n        onAddQueue={handleAddQueue}\n        onClose={closeAddDialog}\n      />\n    </Fragment>\n  );\n};\n\nexport default Host;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/RegisterQueueDialog.tsx",["747"],"import React, { useEffect, useState } from 'react';\nimport { Modal, Form, Select, Checkbox } from 'antd';\nimport { DiscoverQueuesPayload, Queue } from '../../api';\nimport { useAsync } from '../../hooks';\nconst { Option } = Select;\n\ninterface RegisterQueueDialogProps {\n  visible: boolean;\n  loadQueues: () => Promise<DiscoverQueuesPayload[]>;\n  onAddQueue: (prefix: string, name: string) => Promise<Queue>;\n  onClose?: () => void;\n}\n\nconst RegisterQueueDialog: React.FC<RegisterQueueDialogProps> = (props) => {\n  const { visible, onAddQueue } = props;\n  const [prefixes, setPrefixes] = useState<string[]>([]);\n  const [queues, setQueues] = useState<DiscoverQueuesPayload[]>([]);\n  const [filtered, setFiltered] = useState<DiscoverQueuesPayload[]>([]);\n  const [prefix, setPrefix] = useState<string>('');\n  const [queue, setQueue] = useState<DiscoverQueuesPayload | null>(null);\n  const [isAdding, setIsAdding] = useState(false);\n\n  const { execute, loading } = useAsync(props.loadQueues);\n  const [form] = Form.useForm();\n\n  function fetch() {\n    execute().then((items) => {\n      const dedupe = new Set<string>(\n        items.map((x: DiscoverQueuesPayload) => x.prefix),\n      );\n      setQueues(items);\n      setPrefixes(Array.from(dedupe));\n      setFiltered([...items]);\n    });\n  }\n\n  useEffect(() => {\n    if (!prefix || prefix.length === 0) {\n      setFiltered(queues);\n    } else {\n      setFiltered(queues.filter((x) => x.prefix === prefix));\n    }\n  }, [prefix, queues]);\n\n  function onChange(value: any) {\n    const [prefix, name] = (value + '').split(':');\n    if (prefix && name) {\n      const value: DiscoverQueuesPayload = {\n        prefix,\n        name,\n      };\n      setQueue(value);\n    }\n  }\n\n  function handleClose(): void {\n    props.onClose && props.onClose();\n  }\n\n  useEffect(() => {\n    visible && fetch();\n  }, [visible]);\n\n  useEffect(() => {\n    if (!prefix || prefix.length === 0) {\n      setFiltered(queues);\n    } else {\n      setFiltered(queues.filter((x) => x.prefix === prefix));\n    }\n  }, [prefix, queues]);\n\n  function remove(\n    queues: DiscoverQueuesPayload[],\n    item: DiscoverQueuesPayload,\n  ): DiscoverQueuesPayload[] {\n    return queues.filter((x) => {\n      return !(item.prefix === x.prefix && item.name === x.name);\n    });\n  }\n\n  function registerQueue() {\n    // onSelect && onSelect(value)\n    if (!queue) return;\n    form\n      .validateFields()\n      .then(async (values) => {\n        setIsAdding(true);\n        try {\n          await onAddQueue(queue.prefix, queue.name);\n          let newItems = remove(queues, queue);\n          setQueues(newItems);\n          newItems = remove(filtered, queue);\n          setFiltered(newItems);\n          setQueue(null);\n          form.resetFields();\n        } finally {\n          setIsAdding(false);\n        }\n      })\n      .catch((info) => {\n        console.log('Validate Failed:', info);\n      });\n  }\n\n  return (\n    <Modal\n      visible={visible}\n      centered\n      title=\"Register a queue\"\n      okText=\"Add Queue\"\n      cancelText=\"Close\"\n      onCancel={handleClose}\n      onOk={registerQueue}\n      okButtonProps={{\n        type: 'primary',\n        disabled: !queue,\n        loading: isAdding,\n      }}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"register-queue-modal\"\n        initialValues={{ modifier: 'public' }}\n      >\n        <Form.Item\n          name=\"prefix\"\n          label=\"Prefix\"\n          rules={[{ required: true, message: 'Missing prefix' }]}\n        >\n          <Select\n            placeholder=\"Prefix\"\n            onChange={(e) => setPrefix(String(e))}\n            disabled={loading}\n          >\n            {prefixes.map((prefix) => (\n              <Option value={prefix}>{prefix}</Option>\n            ))}\n          </Select>\n        </Form.Item>\n\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n              message: 'Please select a queue!',\n            },\n          ]}\n        >\n          <Select\n            placeholder=\"Select A Queue\"\n            onChange={onChange}\n            disabled={loading}\n          >\n            {filtered.map((queue) => (\n              <Option\n                key={`${queue.prefix}:${queue.name}`}\n                value={`${queue.prefix}:${queue.name}`}\n              >\n                {queue.name}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item name=\"monitor-stats\" valuePropName=\"checked\">\n          <Checkbox>Track Statistics</Checkbox>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default RegisterQueueDialog;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/RedisStats/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/DatePicker/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/RangePicker/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-previous.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/QueueCard.tsx",["748","749"],"import React, { useState, useEffect } from 'react';\nimport { Statistic, Space, Badge, Col, Row, Tooltip } from 'antd';\nimport ProCard from '@ant-design/pro-card';\nimport { QueueActions } from '../../@types/actions';\nimport { QueueMenu, QueueStateTag } from '../../components';\n\nimport prettyMilliseconds from 'pretty-ms';\n\nimport { JobCounts, Queue, StatsSnapshot } from '../../api';\nimport { useNavigate } from 'react-router-dom';\nimport { JobCountsPieChart, MiniArea } from '../../components/Charts';\nimport { BellOutlined } from '@ant-design/icons';\nimport { FaCogs } from 'react-icons/fa';\nimport { calcErrorPercentage } from '../../lib/stats';\nconst { Divider } = ProCard;\n\ntype QueueCardProps = {\n  queue: Queue;\n  stats?: StatsSnapshot[];\n  statsSummary?: StatsSnapshot | null;\n  onSelect?: (queue: Queue) => void;\n  actions: QueueActions;\n};\n\nfunction statsFormatter(value: any) {\n  const val = prettyMilliseconds(parseInt(value), { compact: false });\n  return <Space>{val}</Space>;\n}\n\nfunction StatsCard({ stats }: { stats: StatsSnapshot }) {\n  return (\n    <ProCard.Group>\n      <ProCard>\n        <Statistic\n          title=\"Median\"\n          value={stats.median}\n          formatter={statsFormatter}\n        />\n      </ProCard>\n      <Divider />\n      <ProCard>\n        <Statistic title=\"Mean\" value={stats.mean} formatter={statsFormatter} />\n      </ProCard>\n      <Divider />\n      <ProCard>\n        <Statistic title=\"95th\" value={stats.p95} formatter={statsFormatter} />\n      </ProCard>\n      <Divider />\n      <ProCard>\n        <Statistic title=\"99th\" value={stats.p99} formatter={statsFormatter} />\n      </ProCard>\n    </ProCard.Group>\n  );\n}\n\nfunction AlertCountIndicator({ count }: { count: number }) {\n  return (\n    <Badge count={count}>\n      <Tooltip title=\"Alerts\">\n        <BellOutlined style={{ cursor: 'pointer' }} />\n      </Tooltip>\n    </Badge>\n  );\n}\n\nconst QueueCard: React.FC<QueueCardProps> = (props) => {\n  const { queue, actions, stats = [], statsSummary } = props;\n\n  const [errorPercentage, setErrorPercentage] = useState(0);\n\n  const [chartData, setChartData] = useState<\n    {\n      x: number;\n      y: number;\n    }[]\n  >([]);\n\n  const [counts, setJobCounts] = useState<JobCounts>(\n    queue.jobCounts || {\n      completed: 0,\n      failed: 0,\n      delayed: 0,\n      active: 0,\n      waiting: 0,\n      paused: 0,\n    },\n  );\n\n  useEffect(() => {\n    const data = (stats ?? []).map((val) => ({\n      x: val.startTime,\n      y: val.completed,\n    }));\n    setChartData(data);\n  }, [stats]);\n\n  useEffect(() => {\n    if (statsSummary) {\n      const percentage = calcErrorPercentage(statsSummary);\n      setErrorPercentage(percentage);\n    }\n  }, [statsSummary]);\n\n  const navigate = useNavigate();\n\n  const selectQueue = () => navigate(`/queues/${queue.id}/jobs`);\n  const gotoWorkers = () => navigate(`/queues/${queue.id}/workers`);\n\n  const title = (\n    <Space size={3}>\n      <a onClick={selectQueue}>{queue?.name}</a>\n      <QueueStateTag queue={queue} style={{ marginLeft: '2px' }} />\n    </Space>\n  );\n\n  const headerActions = (\n    <Space size={12} direction=\"horizontal\">\n      <Tooltip placement=\"bottom\" title={`${queue?.workerCount ?? 0} workers`}>\n        <FaCogs\n          onClick={gotoWorkers}\n          style={{ opacity: 0.5, marginTop: '5px', cursor: 'pointer' }}\n        />\n      </Tooltip>\n      <AlertCountIndicator count={queue.ruleAlertCount ?? 0} />\n      <QueueMenu queue={queue} actions={actions} />\n    </Space>\n  );\n\n  return (\n    <ProCard\n      style={{ marginTop: 8 }}\n      gutter={8}\n      title={title}\n      extra={headerActions}\n    >\n      <Row>\n        <Col span={6}>\n          <Statistic\n            value={queue.throughput.m15Rate}\n            title=\"Throughput\"\n            precision={1}\n            suffix=\"/min\"\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            value={queue.errorRate.m15Rate}\n            title=\"Errors\"\n            precision={1}\n            suffix=\"/min\"\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            value={errorPercentage}\n            title=\"Error %\"\n            precision={1}\n            suffix=\"%\"\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            value={queue.waitTimeAvg}\n            title=\"Avg Wait\"\n            precision={1}\n            formatter={statsFormatter}\n          />\n        </Col>\n      </Row>\n      <JobCountsPieChart counts={counts} height={300} />\n      <div style={{ marginBottom: '8px' }}>\n        <MiniArea height={45} color=\"#975FE4\" data={chartData} />\n      </div>\n      {statsSummary && <StatsCard stats={statsSummary} />}\n    </ProCard>\n  );\n};\n\nexport default QueueCard;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Host/QueueGrid.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/chart-utils.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/ErrorChart/ErrorRateChart.tsx",["750","751","752","753","754","755","756","757"],"import React, { useCallback, useEffect, useState } from 'react';\nimport { StatsGranularity } from '../../../api';\nimport {\n  BackgroundColor,\n  formatDate,\n  getStatsChartData,\n  TickValues,\n  TimeAxisFormats,\n} from '../chart-utils';\nimport { Chart, Area, Line } from 'bizcharts';\n\nexport interface ErrorDataItem {\n  start: number;\n  end: number;\n  failed: number;\n  completed: number;\n}\n\ninterface ErrorChartProps {\n  height?: number;\n  granularity?: StatsGranularity;\n  data: ErrorDataItem[];\n}\n\nexport function calcErrorPercentage(completed: number, failed: number): number {\n  const count = completed + failed || 0;\n  return failed / count;\n}\n\nconst ErrorRateChart: React.FC<ErrorChartProps> = (props) => {\n  const { data = [], height = 400, granularity } = props;\n\n  type ChartData = {\n    start: number;\n    end: number;\n    value: number;\n    failed: number;\n    completed: number;\n  };\n\n  const [errorCount, setErrorCount] = useState(0);\n  const [completedCount, setCompletedCount] = useState(0);\n  const [errorPercentage, setErrorPercentage] = useState(0);\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n\n  function updateSeries() {\n    const _data: ChartData[] = [];\n    let totalFailures = 0;\n    let totalCompleted = 0;\n    data.map((item) => {\n      totalCompleted += item.completed;\n      totalFailures += item.failed;\n      _data.push({\n        ...item,\n        value: calcErrorPercentage(item.completed, item.failed),\n      });\n    });\n    setChartData(_data);\n    setErrorCount(totalFailures);\n    setCompletedCount(totalCompleted);\n    setErrorPercentage(calcErrorPercentage(totalCompleted, totalFailures));\n  }\n\n  useEffect(updateSeries, [data]);\n\n  const dateFormatter = useCallback((date) => formatDate(date, granularity), [\n    granularity,\n  ]);\n\n  const scale = {\n    value: {\n      nice: true,\n    },\n    start: {\n      alias: 'Time',\n      type: 'time',\n      formatter: dateFormatter,\n      nice: false,\n    },\n  };\n\n  return (\n    <Chart scale={scale} height={height} data={chartData} autoFit>\n      <Area position=\"start*value\" />\n      <Line position=\"start*value\" />\n    </Chart>\n  );\n};\nexport default ErrorRateChart;\n","/Users/ccollie/WebstormProjects/toro-ui/src/providers/ApolloProvider.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-update-effect.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobList/use-job-query.ts",[],["758","759"],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-job-actions.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueStateTag/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueStateTag/QueueStateTag.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueFilterToolbar/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueFilterToolbar/QueueFilterToolbar.tsx",["760","761"],"import { LightFilter, ProFormText } from '@ant-design/pro-form';\nimport { Checkbox, Input, Space } from 'antd';\nimport React, { useCallback, useRef } from 'react';\nimport { QueueFilter } from '../../@types/queue';\nimport { SortOrderEnum } from '../../api';\nimport { useWhyDidYouUpdate } from '../../hooks/use-why-update';\nimport SortSelect from './SortSelect';\n\nconst { Search } = Input;\n\ninterface FilterToolbarProps {\n  filter: QueueFilter;\n  onFilterUpdated: (filter: QueueFilter) => void | Promise<void>;\n}\n\nconst QueueFilterToolbar: React.FC<FilterToolbarProps> = (props) => {\n  const filter = useRef<QueueFilter>(normalizeFilter(props.filter));\n\n  useWhyDidYouUpdate('QueueFilterToolbar', props);\n\n  function cycle(val: boolean | undefined) {\n    if (val === undefined) return true;\n    return val ? false : undefined;\n  }\n\n  const onActiveClick = useCallback(() => {\n    filter.current.active = cycle(filter.current.active);\n  }, []);\n\n  const onPausedClick = useCallback(() => {\n    filter.current.paused = cycle(filter.current.paused);\n  }, []);\n\n  async function onChange() {\n    if (props.onFilterUpdated) return props.onFilterUpdated(filter.current);\n  }\n\n  const onSortChanged = useCallback(function onSortChanged(\n    field: string,\n    order: SortOrderEnum,\n  ) {\n    console.log(field);\n    filter.current.sortBy = field;\n    filter.current.sortOrder = order;\n    return onChange();\n  },\n  []);\n\n  const onSearchTextChange = useCallback(function onSearch(value: string) {\n    console.log(value);\n    filter.current.searchText = value;\n    return onChange();\n  }, []);\n\n  async function handleDropdownUpdate(values: Record<string, any>) {\n    filter.current.active = values['active'] as boolean;\n    filter.current.paused = values['paused'] as boolean;\n    filter.current.prefix = values['prefix'] as string;\n    await onChange();\n  }\n\n  function FilterDropdown() {\n    const { active, paused, prefix } = filter.current;\n    return (\n      <LightFilter\n        initialValues={{\n          active,\n          paused,\n          prefix,\n        }}\n        submitter={{\n          // Configure the button text\n          searchConfig: {\n            resetText: 'Reset',\n            submitText: 'Submit',\n          },\n        }}\n        collapse\n        onFinish={handleDropdownUpdate}\n      >\n        <ProFormText\n          width=\"md\"\n          name=\"prefix\"\n          label=\"Queue prefix\"\n          placeholder=\"Please enter a prefix\"\n        />\n        <Checkbox\n          name=\"active\"\n          indeterminate={active === undefined}\n          onClick={onActiveClick}\n          checked={active}\n        >\n          Active\n        </Checkbox>\n        <Checkbox\n          name=\"paused\"\n          indeterminate={paused === undefined}\n          checked={paused}\n          onClick={onPausedClick}\n        >\n          Paused\n        </Checkbox>\n      </LightFilter>\n    );\n  }\n\n  const { sortBy, sortOrder, searchText } = filter.current;\n\n  return (\n    <Space>\n      <Search\n        placeholder=\"input search text\"\n        allowClear\n        onSearch={onSearchTextChange}\n        value={searchText}\n        style={{ width: 200 }}\n      />\n      <SortSelect\n        sortField={sortBy}\n        sortOrder={sortOrder}\n        onSortChanged={onSortChanged}\n      />\n      <FilterDropdown />\n    </Space>\n  );\n};\n\nfunction normalizeFilter(filter: QueueFilter): QueueFilter {\n  filter = filter ?? {\n    sortOrder: SortOrderEnum.Asc,\n  };\n  const result: QueueFilter = {\n    sortOrder: filter.sortOrder || SortOrderEnum.Asc,\n    sortBy: filter.sortBy || 'name',\n  };\n  if (filter.searchText) {\n    result.searchText = filter.searchText;\n  }\n  if (filter.prefix) {\n    result.prefix = filter.prefix;\n  }\n  if (filter.paused !== undefined) {\n    result.paused = filter.paused;\n  }\n  if (filter.active !== undefined) {\n    result.active = filter.active;\n  }\n  return result;\n}\n\nfunction stringEqual(a: string | undefined, b: string | undefined): boolean {\n  if (!a && !b) return true;\n  return a === b;\n}\n\nfunction filtersEqual(a: QueueFilter, b: QueueFilter): boolean {\n  a = normalizeFilter(a);\n  b = normalizeFilter(b);\n  return (\n    a.paused === b.paused &&\n    stringEqual(a.prefix, b.prefix) &&\n    stringEqual(a.searchText, b.searchText) &&\n    a.sortBy === b.sortBy &&\n    a.sortOrder === b.sortOrder\n  );\n}\n\nfunction arePropsEqual(a: FilterToolbarProps, b: FilterToolbarProps): boolean {\n  return (\n    filtersEqual(a.filter, b.filter) && a.onFilterUpdated === b.onFilterUpdated\n  );\n}\n\nexport default React.memo(QueueFilterToolbar, arePropsEqual);\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueueFilterToolbar/SortSelect.tsx",["762"],"import {\n  SortAscendingOutlined,\n  SortDescendingOutlined,\n} from '@ant-design/icons';\nimport { Button, Select, Space } from 'antd';\nimport React, { useCallback, useState } from 'react';\nimport { SortOrderEnum } from '../../api';\n\nconst { Option } = Select;\n\n// todo: error percentage/ error percentage then rate\nconst FIELDS = [\n  'name',\n  'mean',\n  'median',\n  '90th',\n  '95th',\n  '99th',\n  'throughput',\n  'error rate',\n  'wait time',\n];\n\nconst FieldMap: Record<string, string> = {\n  mean: 'statsAggregate.mean',\n  median: 'statsAggregate.median',\n  '90th': 'statsAggregate.p90',\n  '95th': 'statsAggregate.p95',\n  '99th': 'statsAggregate.p99',\n  throughput: 'throughput.m15Rate',\n  'error rate': 'errorRate.m15Rate',\n  'wait time': 'waitTimeAvg',\n};\n\ninterface SortButtonProps {\n  sortField?: string;\n  sortOrder?: SortOrderEnum;\n  onSortChanged: (field: string, sortOrder: SortOrderEnum) => void;\n}\n\nconst SortSelect: React.FC<SortButtonProps> = (props) => {\n  const {\n    sortOrder: order = SortOrderEnum.Asc,\n    sortField = 'name',\n    onSortChanged,\n  } = props;\n  const [sortOrder, setSortOrder] = useState<SortOrderEnum>(order);\n  const [field, setField] = useState(sortField);\n\n  const onFieldSelected = useCallback(() => {\n    if (field) {\n      const mapped = FieldMap[field] || field;\n      onSortChanged(mapped, sortOrder);\n    }\n  }, [onSortChanged]);\n\n  function sort(order: SortOrderEnum) {\n    setSortOrder(order);\n    onFieldSelected();\n  }\n\n  function toggle() {\n    if (sortOrder === SortOrderEnum.Asc) {\n      sort(SortOrderEnum.Desc);\n    } else {\n      sort(SortOrderEnum.Asc);\n    }\n  }\n\n  function onUpdateField(value: string) {\n    setField(value);\n    onFieldSelected();\n  }\n\n  return (\n    <Space size={1}>\n      <Select\n        onSelect={onUpdateField}\n        size=\"middle\"\n        style={{\n          width: '100px',\n        }}\n      >\n        {FIELDS.map((name, index) => (\n          <Option value={name} key={`${index}`}>\n            {name}\n          </Option>\n        ))}\n      </Select>\n      <Button\n        onClick={toggle}\n        icon={\n          sortOrder === SortOrderEnum.Asc ? (\n            <SortAscendingOutlined />\n          ) : (\n            <SortDescendingOutlined />\n          )\n        }\n      />\n    </Space>\n  );\n};\n\nexport default SortSelect;\n","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-queue-filter-params.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Dashboard/index.tsx",["763","764"],"import { Empty, PageHeader } from 'antd';\nimport React, { FC, useState, useEffect } from 'react';\nimport { DashboardPageDocument, QueueHost } from '../../api';\nimport { useQuery } from '@apollo/client';\nimport { HostCard } from '../../components';\n\nconst Dashboard: FC = () => {\n  const [hosts, setHosts] = useState<QueueHost[]>([]);\n  const [range, setRange] = useState('last_hour');\n\n  // TODO: transition to useStore\n  const { data, error, loading } = useQuery(DashboardPageDocument, {\n    variables: { range },\n    pollInterval: 25000,\n  });\n\n  useEffect(() => {\n    if (data && !loading) {\n      setHosts(data.hosts as QueueHost[]);\n    }\n  }, [data, loading]);\n\n  return (\n    <>\n      <PageHeader title=\"Hosts\" />\n      {!hosts.length && (\n        <Empty\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n          imageStyle={{\n            height: 60,\n          }}\n          description={<span>No Hosts Configured</span>}\n        />\n      )}\n      {hosts.map((host: QueueHost) => (\n        <HostCard key={`hc-${host.id}`} host={host} />\n      ))}\n    </>\n  );\n};\n\nexport default Dashboard;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/HostStateTag/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/HostStateTag/HostStateTag.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-why-update.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/application/Main.tsx",["765","766","767"],"import { useQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { Layout, Menu, Spin } from 'antd';\nimport {\n  CloudServerOutlined,\n  LoadingOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\nimport { useNavigate } from 'react-router';\nimport {\n  AppInfo,\n  GetAppInfoDocument,\n  GetHostsDocument,\n  QueueHost,\n} from '../api';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\ninterface HostSubMenuProps {\n  host: QueueHost;\n}\nconst HostSubMenu: React.FC<HostSubMenuProps> = (props) => {\n  const { host, ...rest } = props;\n  const navigate = useNavigate();\n\n  function gotoQueue(id: string) {\n    navigate(`/queues/${id}/metrics`);\n  }\n\n  function gotoHost() {\n    navigate(`/hosts/${host.id}`);\n  }\n\n  return (\n    <SubMenu\n      icon={<CloudServerOutlined />}\n      title={host.name}\n      onTitleClick={gotoHost}\n      {...rest}\n    >\n      {host.queues.map((queue) => (\n        <Menu.Item key={queue.id} onClick={() => gotoQueue(queue.id)}>\n          {queue.name}\n        </Menu.Item>\n      ))}\n    </SubMenu>\n  );\n};\n\nconst Main: React.FC = ({ children }) => {\n  const [app, setApp] = useState<AppInfo | undefined>();\n  const [hosts, setHosts] = useState<QueueHost[]>([]);\n  const [isCollapsed, setCollapsed] = useState(false);\n\n  const { data, error, loading } = useQuery(GetHostsDocument, {\n    pollInterval: 5000,\n  });\n\n  const { data: appData, error: appError, loading: appLoading } = useQuery(\n    GetAppInfoDocument,\n  );\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (data && !loading) {\n      const _hosts = (data.hosts ?? []) as QueueHost[];\n      setHosts(_hosts);\n    }\n  }, [data, loading]);\n\n  useEffect(() => {\n    if (appData && !appLoading) {\n      setApp(appData?.appInfo);\n    }\n  }, [appData, appLoading]);\n\n  function onCollapsed(collapsed: boolean) {\n    setCollapsed(collapsed);\n  }\n\n  function goHome() {\n    navigate('/');\n  }\n\n  const iconStyle = {\n    marginRight: '3px',\n    marginLeft: isCollapsed ? '16px' : undefined,\n    textAlign: isCollapsed ? 'center' : 'left',\n  } as React.CSSProperties;\n\n  const loadingIcon = <LoadingOutlined style={iconStyle} spin />;\n\n  function Logo() {\n    if (appLoading) return <Spin indicator={loadingIcon} />;\n    return <span style={iconStyle}>🎯</span>;\n  }\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider\n        collapsible={true}\n        onCollapse={onCollapsed}\n        style={{\n          overflow: 'auto',\n          height: '100vh',\n          left: 0,\n        }}\n      >\n        <div className=\"logo\" id=\"logo\" onClick={goHome}>\n          <Logo />\n          {!isCollapsed && <h1>{app?.title ?? 'Toro'}</h1>}\n        </div>\n        <Menu theme=\"dark\" mode=\"inline\">\n          {hosts.map((host) => (\n            <HostSubMenu host={host} key={`h-menu-${host.id}`} />\n          ))}\n          <Menu.Item key=\"3\" icon={<SettingOutlined />}>\n            Settings\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Content\n          style={{ margin: '16px 16px 0', minHeight: 280, overflow: 'initial' }}\n        >\n          {children}\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>©2020 Guanima Tech</Footer>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default Main;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Metrics/index.tsx",["768","769","770","771","772"],"import ProCard from '@ant-design/pro-card';\nimport { Col, Divider, Row, Space, Statistic } from 'antd';\nimport prettyMilliseconds from 'pretty-ms';\nimport React, { FC, useEffect, useState } from 'react';\nimport {\n  QueueStatsPageQueryDocument,\n  Queue,\n  StatsGranularity,\n  StatsSnapshot,\n} from '../../api';\nimport { useParams } from 'react-router';\nimport { useLazyQuery } from '@apollo/client';\nimport { RangePickerValue } from '../../components';\nimport { StatsLineChart } from '../../components/Charts';\nimport ErrorRateChart, {\n  ErrorDataItem,\n} from '../../components/Charts/ErrorChart/ErrorRateChart';\nimport TimeRangeToolbar, {\n  RangeType,\n} from '../../components/Charts/StatsLineChart/TimeRangeToolbar';\nimport { useInterval } from '../../hooks';\nimport { calcErrorPercentage } from '../../lib/stats';\n\nconst ChartHeight = '340px';\n\nconst RuntimeFields = ['mean', 'median', 'p90', 'p95', 'p99'];\n\nfunction statsFormatter(value: any) {\n  const val = prettyMilliseconds(parseInt(value), { compact: false });\n  return <Space>{val}</Space>;\n}\n\nfunction getErrorChardData(snaps: StatsSnapshot[]): ErrorDataItem[] {\n  return snaps.map((snap) => {\n    return {\n      start: +new Date(snap.startTime),\n      end: +new Date(snap.endTime),\n      failed: snap.failed,\n      completed: snap.completed,\n    };\n  });\n}\n\nconst POLL_INTERVAL = 60000;\n\nconst Metrics: FC = () => {\n  const { queueId } = useParams();\n  const [range, setRange] = useState('this_hour');\n  const [queue, setQueue] = useState<Queue | null>(null);\n  const [granularity, setGranularity] = useState(StatsGranularity.Minute);\n  const [snapshots, setSnapshots] = useState<StatsSnapshot[]>([]);\n  const [errorChartData, setErrorChartData] = useState<ErrorDataItem[]>([]);\n  const [errorPercentage, setErrorPercentage] = useState(0);\n  const [pollInterval, setPollInterval] = useState<number | null>(\n    POLL_INTERVAL,\n  );\n\n  // todo: use actual date-times so we can cache results\n  const [getData, { loading, data: queueData, called, error }] = useLazyQuery(\n    QueueStatsPageQueryDocument,\n    {\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  function fetch() {\n    getData({\n      variables: {\n        id: queueId,\n        range,\n        granularity,\n      },\n    });\n  }\n\n  useEffect(fetch, [queueId, range, granularity]);\n\n  useEffect(() => {\n    if (queueData && !loading) {\n      setQueue((queueData?.queue as Queue) ?? null);\n      setSnapshots(queue?.stats ?? []);\n      setErrorChartData(getErrorChardData(snapshots));\n      const summary = queueData?.queue?.statsAggregate;\n      if (summary) {\n        const perc = calcErrorPercentage(summary as StatsSnapshot);\n        setErrorPercentage(perc);\n      }\n    }\n  }, [queueData, loading]);\n\n  useInterval(() => {\n    if (called && !loading) {\n      fetch();\n    }\n  }, pollInterval);\n\n  function onDateRangeChange(type: RangeType, dates: RangePickerValue) {\n    console.log('type = ' + type);\n    console.log(dates);\n    const [start, end] = dates || [null, null];\n    if (start && end) {\n      const now = new Date();\n      const interval = `${start.getTime()}-${end.getTime()}`;\n      setRange(interval);\n      setPollInterval(end < now ? null : POLL_INTERVAL);\n      fetch();\n    }\n  }\n\n  return (\n    <>\n      <ProCard.Group colSpan={24} direction=\"row\" ghost>\n        <ProCard>\n          <Statistic\n            title=\"Response - Mean\"\n            value={queue?.statsAggregate?.mean ?? 0}\n            formatter={statsFormatter}\n          />\n        </ProCard>\n        <Divider type=\"vertical\" />\n        <ProCard>\n          <Statistic\n            title=\"Response - 95th\"\n            value={queue?.statsAggregate?.p95 ?? 0}\n            formatter={statsFormatter}\n          />\n        </ProCard>\n        <Divider type=\"vertical\" />\n        <ProCard>\n          <Statistic\n            title=\"Throughput\"\n            value={queue?.throughput.m15Rate}\n            precision={1}\n            suffix=\"min\"\n          />\n        </ProCard>\n        <Divider type=\"vertical\" />\n        <ProCard>\n          <Statistic\n            title=\"Error Rate\"\n            value={queue?.errorRate.m15Rate}\n            precision={1}\n            suffix=\"min\"\n          />\n        </ProCard>\n        <Divider type=\"vertical\" />\n        <ProCard>\n          <Statistic\n            value={errorPercentage}\n            title=\"Error %\"\n            precision={1}\n            suffix=\"%\"\n          />\n        </ProCard>\n        <Divider type=\"vertical\" />\n        <ProCard>\n          <Statistic\n            title=\"Avg Wait Time\"\n            value={queue?.waitTimeAvg}\n            formatter={statsFormatter}\n          />\n        </ProCard>\n      </ProCard.Group>\n      <Row gutter={24} style={{ marginBottom: '5px', marginTop: '5px' }}>\n        <Col span={24}>\n          <TimeRangeToolbar onRangeChange={onDateRangeChange} />\n        </Col>\n      </Row>\n      <ProCard title=\"Runtime\" loading={loading && !called}>\n        <StatsLineChart\n          height={300}\n          granularity={granularity}\n          fields={RuntimeFields}\n          data={snapshots}\n        />\n      </ProCard>\n      <Row gutter={8} style={{ marginTop: 4 }}>\n        <Col span={12}>\n          <ProCard title=\"Throughput\">\n            <StatsLineChart\n              height={300}\n              granularity={granularity}\n              fields={['completed']}\n              data={snapshots}\n            />\n          </ProCard>\n        </Col>\n        <Col span={12}>\n          <ProCard title=\"Errors\" loading={loading && !called}>\n            <ErrorRateChart\n              data={errorChartData}\n              height={300}\n              granularity={granularity}\n            />\n          </ProCard>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Metrics;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/index.tsx",["773","774","775","776","777","778","779","780"],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Queue/QueueHeader.tsx",["781"],"import React, { useEffect, useState } from 'react';\nimport { FaBolt, FaClock, FaCog, FaCogs, FaInbox } from 'react-icons/fa';\nimport { ImStatsDots } from 'react-icons/im';\nimport { Button, Typography, Space, PageHeader } from 'antd';\nimport { Link, NavLink, useLocation } from 'react-router-dom';\nimport { QueueActions } from '../../@types/actions';\nimport { QueueMenu, QueueStateTag } from '../../components';\nimport { Queue } from '../../api';\nimport { useNavigate } from 'react-router';\nimport { useQueueActions } from '../../hooks';\n\nconst { Title } = Typography;\n\ntype QueueHeaderProps = {\n  queue: Queue;\n};\n\nconst QueueHeader: React.FC<QueueHeaderProps> = (props) => {\n  const { queue } = props;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const actions = useQueueActions();\n  const [currentTab, setCurrentTab] = useState<string>('');\n\n  function goBack(): void {\n    navigate(`/hosts/${queue.hostId}`);\n  }\n\n  function handleRemoveQueue(id: string): Promise<boolean> {\n    return actions.unregisterQueue(id).then((removed) => {\n      if (removed) {\n        goBack();\n      }\n      return removed;\n    });\n  }\n\n  async function handleDeleteQueue(id: string) {\n    const value = await actions.deleteQueue(id);\n    goBack();\n    return value;\n    // todo: do something with the result\n  }\n\n  const queueActions: QueueActions = {\n    ...actions,\n    deleteQueue: handleDeleteQueue,\n    unregisterQueue: handleRemoveQueue,\n  };\n\n  function getTab(): string {\n    const path = location.pathname;\n    const parts = path.split('/');\n    return parts.length ? parts[parts.length - 1] : '';\n  }\n\n  useEffect(() => {\n    setCurrentTab(getTab());\n  }, [location.pathname]);\n\n  function TitleCrumbs() {\n    return (\n      <Space>\n        <Link to={`/hosts/${queue.hostId}`}>\n          <Title level={3}>{queue.host}</Title>\n        </Link>\n        <span>/</span>\n        <Title level={3}>{queue.name}</Title>\n      </Space>\n    );\n  }\n\n  function TabButton({\n    name,\n    label,\n    icon,\n  }: {\n    label?: string;\n    name: string;\n    icon: React.ReactNode;\n  }) {\n    const isCurrent = currentTab === name;\n    label = label || name;\n    const stub = (label.charAt(0) + label.substring(1))\n      .toLowerCase()\n      .replace(' ', '-');\n\n    return (\n      <Button\n        key={`q-hdr-tab-${name}`}\n        icon={icon}\n        type={isCurrent ? 'default' : 'link'}\n      >\n        <NavLink\n          to={`/queues/${queue.id}/${stub}`}\n          style={{ marginLeft: '3px' }}\n          activeStyle={{\n            fontWeight: 'bold',\n          }}\n        >\n          {label || name}\n        </NavLink>\n      </Button>\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader\n        title={<TitleCrumbs />}\n        tags={<QueueStateTag queue={queue} />}\n        extra={[\n          <TabButton name=\"Metrics\" icon={<ImStatsDots />} key=\"metrics\" />,\n          <TabButton name=\"Jobs\" icon={<FaCog />} key=\"jobs\" />,\n          <TabButton\n            name=\"scheduled-jobs\"\n            label=\"Scheduled Jobs\"\n            icon={<FaClock />}\n            key=\"scheduled\"\n          />,\n          <TabButton\n            name=\"workers\"\n            label=\"Workers\"\n            icon={<FaCogs />}\n            key=\"workers\"\n          />,\n          <TabButton\n            name=\"rules\"\n            label=\"Rules\"\n            icon={<FaBolt />}\n            key=\"rules\"\n          />,\n          <QueueMenu queue={queue} actions={queueActions} key=\"queue-menu\" />,\n        ]}\n        avatar={{\n          icon: <FaInbox />,\n        }}\n      >\n        <span></span>\n      </PageHeader>\n    </div>\n  );\n};\n\nexport default QueueHeader;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Queue/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/ReturnValue/index.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobBulkActions/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobBulkActions/JobBulkActions.tsx",["782"],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobListDetail.tsx",["783"],"import React from 'react';\nimport { useDetailsTabs } from '../../hooks';\nimport {\n  FaDatabase,\n  FaEquals,\n  FaExclamation,\n  FaList,\n  FaSadTear,\n  FaSlidersH,\n} from 'react-icons/fa';\nimport { Job, JobFragment, JobLogs, JobStatus } from '../../api';\nimport { Tabs } from 'antd';\nconst { TabPane } = Tabs;\n\nconst TabNames = ['Error', 'Data', 'Options', 'Logs', 'Return Value'];\nconst Icons = [FaExclamation, FaDatabase, FaSlidersH, FaList, FaEquals];\n\nfunction PaneIcon({ tabName }: { tabName: string }) {\n  let Icon = FaSadTear;\n  let i = TabNames.indexOf(tabName);\n  if (i >= 0) Icon = Icons[i];\n  const iconStyle = {\n    marginRight: '3px',\n  };\n  return <Icon style={iconStyle} />;\n}\n\ntype JobListDetailProps = {\n  job: Job | JobFragment;\n  status: JobStatus;\n  isLoading?: boolean;\n  getLogs: (start: number, end: number) => Promise<JobLogs>;\n};\n\nexport const JobListDetail: React.FC<JobListDetailProps> = (props) => {\n  const { job, status, getLogs } = props;\n  const { tabs, selectedTab, getTabContent } = useDetailsTabs(status, getLogs);\n\n  function onTabChange(activeKey: string): void {\n    const tab = tabs.find((tab) => tab.title === activeKey);\n    tab?.select();\n  }\n\n  return (\n    <Tabs type=\"card\" onChange={onTabChange}>\n      {tabs.map((tab, index) => (\n        <TabPane\n          disabled={tab.isDisabled}\n          tab={\n            <span>\n              {' '}\n              <PaneIcon tabName={tab.title} /> {tab.title}\n            </span>\n          }\n          key={tab.title}\n        >\n          <div>{tab.isActive ? getTabContent(job) : <span></span>}</div>\n        </TabPane>\n      ))}\n    </Tabs>\n  );\n};\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobProgress.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/columns.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobActions/JobActions.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobActions/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JobBulkActions/CleanJobsDialog.tsx",["784","785"],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Charts/StatsLineChart/TimeRangeToolbar.tsx",["786"],"import { LeftOutlined, RightOutlined } from '@ant-design/icons';\nimport { Button, Select, Space } from 'antd';\nimport ms from 'ms';\nimport React, { useState } from 'react';\nimport { endOf, startOf } from '../../../lib/dates';\nimport DatePicker from '../../DatePicker';\nimport { RangePickerValue } from '../../RangePicker';\nimport addMilliseconds from 'date-fns/addMilliseconds';\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\n\nexport type RangeType = 'hour' | 'day' | 'week' | 'month' | 'custom';\n\nexport interface TimeRangeToolbarOpts {\n  rangeType?: RangeType;\n  range?: RangePickerValue;\n  minDate?: Date;\n  onRangeChange: (type: RangeType, dates: RangePickerValue) => void;\n}\n\nconst TimeRangeToolbar: React.FC<TimeRangeToolbarOpts> = (props) => {\n  const [rangeType, setRangeType] = useState<RangeType>(\n    (props.rangeType ?? 'hour') as RangeType,\n  );\n  const [range, setRange] = useState<RangePickerValue>([null, null]);\n  const [dateValue, setDateValue] = useState<Date | null>(new Date());\n  const [nextDisabled, setNextDisabled] = useState<boolean>(false);\n  const [prevDisabled, setPrevDisabled] = useState<boolean>(false);\n  const [custom, setCustom] = useState(false);\n\n  function emitChange() {\n    props.onRangeChange && props.onRangeChange(rangeType, range);\n  }\n\n  function _setRange(start: Date | null, end: Date | null) {\n    const [oldStart, oldEnd] = range || [null, null];\n    if (props.minDate) {\n      if (start && start < props.minDate) start = props.minDate;\n    }\n    setNextDisabled(!!end && end > new Date());\n    setRange([start, end]);\n    setDateValue(start);\n    if (start !== oldStart || end !== oldEnd) {\n      emitChange();\n    }\n  }\n\n  function handleRangeChange(\n    dates: RangePickerValue,\n    dateStrings: [string, string],\n  ) {\n    setRangeType('custom');\n    const [start, end] = dates || [null, null];\n    _setRange(start, end);\n  }\n\n  function handleDateChange(value: Date | null, dateString: string) {\n    setDateValue(value);\n    if (value) {\n      value = startOf(value, rangeType);\n      setDateValue(value);\n      _setRange(value, endOf(value, rangeType));\n    } else {\n      _setRange(null, null);\n    }\n  }\n\n  function updateRangeType(type: RangeType) {\n    setRangeType(type);\n    setCustom(false);\n    const pivot = getPivotDate();\n    const start = startOf(pivot, rangeType);\n    const end = endOf(pivot, rangeType);\n    _setRange(start, end);\n  }\n\n  function getMidnight(): Date {\n    const now = new Date();\n    return startOf(now, 'day');\n  }\n\n  function yesterday(): [Date, Date] {\n    const end = addMilliseconds(getMidnight(), -1);\n    const start = startOf(end, 'day');\n    return [start, end];\n  }\n\n  function today(): [Date, Date] {\n    const start = getMidnight();\n    return [start, endOf(start, 'day')];\n  }\n\n  function PickerWithType({ type }: { type: RangeType }) {\n    const now = new Date();\n    setCustom(false);\n    switch (type) {\n      case 'day':\n        return <DatePicker value={dateValue} onChange={handleDateChange} />;\n      case 'week':\n        return (\n          <DatePicker\n            value={dateValue}\n            picker=\"week\"\n            onChange={handleDateChange}\n          />\n        );\n      case 'month':\n        return (\n          <DatePicker\n            picker=\"month\"\n            format=\"MMM - YYYY\"\n            value={dateValue}\n            onChange={handleDateChange}\n          />\n        );\n      default:\n        setCustom(true);\n        return (\n          <RangePicker\n            value={range}\n            showTime={{ format: 'HH:mm' }}\n            onChange={handleRangeChange}\n            style={{ width: 265 }}\n            ranges={{\n              Yesterday: yesterday(),\n              Today: today(),\n              'This Week': [startOf(now, 'week'), endOf(now, 'week')],\n              'This Month': [startOf(now, 'month'), endOf(now, 'month')],\n            }}\n            showNow\n            showHour\n          />\n        );\n    }\n  }\n\n  function getPivotDate(): Date {\n    let pivot = new Date();\n    if (range) {\n      const [start, end] = range;\n      if (start && end) {\n        const diff = end.getTime() - start.getTime();\n        pivot = addMilliseconds(start, diff / 2);\n      } else {\n        pivot = start || end || pivot;\n      }\n    }\n    return pivot;\n  }\n\n  function incrementRange(direction: 'up' | 'down') {\n    const interval = ms(`1 ${rangeType}`) * (direction === 'up' ? 1 : -1);\n    let start = null,\n      end = null;\n    if (!custom) {\n      // using datepicker rather than RangePicker\n      start = dateValue || new Date();\n    } else {\n      if (range) {\n        start = range[0];\n        end = range[1];\n      }\n    }\n    if (!start) {\n      const pivot = getPivotDate();\n      start = startOf(pivot, rangeType);\n    }\n    if (!end) {\n      end = endOf(start, rangeType);\n    }\n    start = addMilliseconds(start, interval);\n    end = addMilliseconds(end, interval);\n    _setRange(start, end);\n  }\n\n  function next() {\n    incrementRange('up');\n  }\n\n  function prev() {\n    incrementRange('down');\n  }\n\n  return (\n    <div>\n      <Space>\n        <Select value={rangeType} onChange={updateRangeType}>\n          <Option value=\"hour\">Hour</Option>\n          <Option value=\"day\">Day</Option>\n          <Option value=\"week\">Week</Option>\n          <Option value=\"month\">Month</Option>\n        </Select>\n        <PickerWithType type={rangeType} />\n        <Button\n          icon={<LeftOutlined />}\n          onClick={prev}\n          disabled={prevDisabled}\n        />\n        <Button\n          icon={<RightOutlined />}\n          onClick={next}\n          disabled={nextDisabled}\n        />\n      </Space>\n    </div>\n  );\n};\n\nexport default TimeRangeToolbar;\n","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-queue-actions.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JsonEditor/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/JsonEditor/JsonEditor.tsx",["787"],"/Users/ccollie/WebstormProjects/toro-ui/src/lib/ajv.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobSchemaDialog.tsx",["788","789","790","791","792","793"],"import { DeleteOutlined, UndoOutlined } from '@ant-design/icons';\nimport {\n  Drawer,\n  Form,\n  Button,\n  Col,\n  Row,\n  Space,\n  AutoComplete,\n  SelectProps,\n} from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n  deleteJobSchema,\n  getJobSchema,\n  setJobSchema,\n  JobSchema,\n} from '../../api';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport { JsonEditor } from '../../components';\nimport { useJobSchemaActions } from '../../hooks';\nimport { useWhyDidYouUpdate } from '../../hooks/use-why-update';\nimport { stringify } from '../../lib';\n\ninterface JobSchemaDialogOpts {\n  queueId: string;\n  isOpen?: boolean;\n  onClose: () => void;\n}\n\nconst JobSchemaDialog: React.FC<JobSchemaDialogOpts> = (props) => {\n  const { queueId, onClose, isOpen = false } = props;\n  const [isSaving, setIsSaving] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isNewItem, setIsNewItem] = useState(false);\n  const [jobName, setJobName] = useState<string | null>(null);\n  const [jobNames, setJobNames] = useState<string[]>([]);\n  const [schema, setSchema] = useState<JobSchema>();\n  const [editSchema, setEditSchema] = useState<JobSchema>();\n  const [isLoadingSchema, setIsLoadingSchema] = useState(false);\n  const [isLoadingNames, setIsLoadingNames] = useState(false);\n  const [isChanged, setChanged] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n  const [options, setOptions] = useState<SelectProps<object>['options']>([]);\n  const [jobOptionsSchema, setJobOptionsSchema] = useState<\n    Record<string, any>\n  >();\n  const [schemaString, setSchemaString] = useState<string>('{}');\n  const [optionsString, setOptionsString] = useState<string>('{}');\n\n  const actions = useJobSchemaActions(queueId);\n\n  useEffect(() => {\n    setIsLoadingNames(true);\n    // todo: do a specific graphql query for this\n    Promise.all([actions.getJobNames(), actions.getJobOptionsSchema()])\n      .then(([names, schema]) => {\n        setJobNames(names);\n        setOptions(\n          jobNames.map((value) => ({\n            value,\n            key: value,\n          })),\n        );\n        setJobOptionsSchema(schema);\n      })\n      .finally(() => setIsLoadingNames(false));\n  }, [queueId]);\n\n  useEffect(() => {\n    let schema, defaultOpts: Record<string, any> | null | undefined;\n    if (editSchema) {\n      schema = editSchema.schema;\n      defaultOpts = editSchema.defaultOpts;\n    }\n    setSchemaString(schema ? stringify(schema) : '{}');\n    setOptionsString(defaultOpts ? stringify(defaultOpts) : '{}');\n  }, [editSchema]);\n\n  const handleClose = useCallback(() => {\n    onClose && onClose();\n  }, [onClose]);\n\n  function loadSchema(jobName: string) {\n    setIsLoadingSchema(true);\n    getJobSchema(queueId, jobName)\n      .then((schema) => {\n        if (schema) {\n          setEditSchema({ ...schema });\n        } else {\n          setEditSchema(undefined);\n        }\n        setSchema(schema);\n      })\n      .finally(() => {\n        setIsLoadingSchema(false);\n      });\n    // todo: handle error\n  }\n\n  function handleJobNameChange(jobName: string): void {\n    const found = !!jobNames.find((x) => x === jobName);\n    setJobName(jobName);\n    setIsNewItem(!found);\n    if (found) loadSchema(jobName);\n  }\n\n  function saveSchema(): void {\n    if (editSchema) {\n      setIsSaving(true);\n      setJobSchema(\n        queueId,\n        jobName!,\n        editSchema.schema!,\n        editSchema.defaultOpts!,\n      )\n        .then((schema) => {\n          setSchema(schema);\n          setEditSchema(schema);\n        })\n        .finally(() => setIsSaving(false));\n    }\n  }\n\n  function handleDeleteSchema() {\n    if (schema && jobName) {\n      setIsDeleting(true);\n      deleteJobSchema(queueId, jobName)\n        .then(() => {\n          setSchema(undefined);\n        })\n        .finally(() => {\n          setIsDeleting(false);\n        });\n    }\n  }\n\n  function revertSchema() {\n    jobName && loadSchema(jobName);\n  }\n\n  function updateEditable(value: Partial<JobSchema>) {\n    setEditSchema({\n      ...(editSchema || {}),\n      ...value,\n      jobName: value?.jobName ?? jobName ?? '',\n    });\n    setChanged(isEqual(editSchema, schema));\n    if (isEmpty(editSchema?.schema) && isEmpty(editSchema?.defaultOpts)) {\n      // todo: error message if not new\n      setIsValid(false);\n    }\n  }\n\n  const onSchemaUpdate = useCallback((value: Record<string, any> | null) => {\n    value = value || Object.create(null);\n    updateEditable({ schema: value });\n  }, []);\n\n  const onOptionsUpdate = useCallback((value: Record<string, any> | null) => {\n    value = value || Object.create(null);\n    updateEditable({ defaultOpts: value });\n  }, []);\n\n  const handleAutoCompleteSearch = (value: string) => {\n    const needle = value.toUpperCase();\n    const filtered = jobNames.filter((name) => {\n      return name.toUpperCase().indexOf(needle) !== -1;\n    });\n    setOptions(\n      filtered.map((value) => ({\n        value,\n        key: value,\n      })),\n    );\n  };\n\n  return (\n    <>\n      <Drawer\n        title=\"Job Schemas\"\n        width={720}\n        onClose={handleClose}\n        visible={isOpen}\n        bodyStyle={{ paddingBottom: 80 }}\n        footer={\n          <div\n            style={{\n              textAlign: 'right',\n            }}\n          >\n            <Button onClick={handleClose} style={{ marginRight: 8 }}>\n              Close\n            </Button>\n          </div>\n        }\n      >\n        <Form layout=\"vertical\" hideRequiredMark>\n          <Row gutter={16}>\n            <Col span={24}>\n              <Form.Item\n                name=\"name\"\n                label=\"Job Name\"\n                rules={[{ required: true, message: 'Please enter job name' }]}\n              >\n                <AutoComplete\n                  allowClear={true}\n                  onSelect={handleJobNameChange}\n                  placeholder=\"Please select or enter a job name\"\n                  options={options}\n                  disabled={isLoadingNames}\n                  onSearch={handleAutoCompleteSearch}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={24}>\n              <span>Schema</span>\n              <JsonEditor\n                height=\"250px\"\n                width=\"100%\"\n                id=\"schema-editor\"\n                name=\"schema\"\n                isDisabled={isLoadingSchema}\n                value={schemaString}\n                onChange={onSchemaUpdate}\n              />\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={24}>\n              <span>Job Options</span>\n              <JsonEditor\n                height=\"250px\"\n                width=\"100%\"\n                id=\"default-options-editor\"\n                name=\"default_options\"\n                isDisabled={isLoadingSchema}\n                value={optionsString}\n                onChange={onOptionsUpdate}\n              />\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={24}>\n              <div style={{ textAlign: 'right' }}>\n                <Space size={5}>\n                  <Button\n                    onClick={saveSchema}\n                    loading={isSaving}\n                    disabled={!isChanged || !isValid}\n                  >\n                    Save\n                  </Button>\n                  <Button\n                    disabled={!isNewItem}\n                    onClick={revertSchema}\n                    icon={<UndoOutlined />}\n                  >\n                    Revert\n                  </Button>\n                  <Button\n                    loading={isDeleting}\n                    onClick={handleDeleteSchema}\n                    icon={<DeleteOutlined />}\n                    disabled={!isNewItem}\n                  >\n                    Delete\n                  </Button>\n                </Space>\n              </div>\n            </Col>\n          </Row>\n        </Form>\n      </Drawer>\n    </>\n  );\n};\n\nexport default JobSchemaDialog;\n","/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-job-schema-actions.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/Icons/Redis.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-bar/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-bar/query-bar.tsx",["794","795"],"import { Button, Space } from 'antd';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport { isArray, isEmpty, isEqual, isFunction, isString } from 'lodash';\nimport { useWhyDidYouUpdate } from '../../../hooks/use-why-update';\nimport { toBool } from '../../../lib';\n\nimport QueryOption from '../query-option';\nimport OptionsToggle from '../options-toggle';\nimport styles from './query-bar.module.css';\n\nimport {\n  DEFAULT_BUTTON_LABEL,\n  DEFAULT_FILTER,\n  DEFAULT_LIMIT,\n  DEFAULT_STATE,\n  QueryState,\n} from '../constants';\nimport { AutocompleteField } from '../query-autocompleter';\nimport { isNumberValid, isFilterValid } from '../utils';\n\ntype Query = {\n  filter: string;\n  limit?: number;\n};\n\ntype QueryKey = keyof Query;\n\nconst OPTION_DEFINITION: Record<QueryKey, any> = {\n  filter: {\n    type: 'document',\n    placeholder: \"{ field: 'value' }\",\n    link: 'https://docs.mongodb.com/compass/current/query/filter/',\n  },\n  limit: {\n    type: 'numeric',\n    placeholder: '0',\n    link: 'https://docs.mongodb.com/manual/reference/method/cursor.limit/',\n  },\n};\n\n/**\n * returns the default query with all the query properties.\n *\n * @return {Object}  new object consisting of all default values.\n */\nfunction _getDefaultQuery(): Query {\n  return {\n    filter: DEFAULT_FILTER,\n    limit: DEFAULT_LIMIT,\n  };\n}\n\ninterface QueryBarProps {\n  filter?: string;\n  limit?: number;\n  autoPopulated?: boolean;\n  buttonLabel?: string;\n  layout?: Array<QueryKey | QueryKey[]>;\n  expanded?: boolean;\n  onReset: () => void;\n  onApply?: (filter: string, limit: number) => void;\n  onChange?: (value: string, label: QueryKey) => void;\n  schemaFields?: AutocompleteField[];\n}\n\nconst QueryBar: React.FC<QueryBarProps> = (props) => {\n  type FieldMeta = {\n    value: any;\n    isValid: boolean;\n    isChanged: boolean;\n  };\n  type FieldMap = Record<QueryKey, FieldMeta>;\n\n  const [hasFocus, setHasFocus] = useState(false);\n  const [expanded, setExpanded] = useState(!!props.expanded);\n  const [queryState, setQueryState] = useState(DEFAULT_STATE);\n  const [valid, setValid] = useState(true);\n  const [isEmptyQuery, setIsEmptyQuery] = useState(true);\n  const lastExecutedQuery = useRef<Query>(_getDefaultQuery());\n\n  useWhyDidYouUpdate('QueryBar', props);\n\n  const filterInput = props.filter ?? DEFAULT_FILTER;\n\n  const fieldMap = useRef<FieldMap>({\n    filter: {\n      isValid: true,\n      value: filterInput,\n      isChanged: false,\n    },\n    limit: {\n      isValid: true,\n      value: (props.limit ?? DEFAULT_LIMIT).toString(),\n      isChanged: false,\n    },\n  });\n\n  useEffect(() => {\n    const map = fieldMap.current;\n    map.filter.value = filterInput;\n    map.limit.value = props.limit ?? DEFAULT_LIMIT;\n  }, [filterInput, props.limit]);\n\n  useEffect(() => {\n    const input = fieldMap.current.filter.value;\n    if (!input.length || input === DEFAULT_FILTER) {\n      setIsEmptyQuery(true);\n    } else {\n      const parsed = JSON.parse(input);\n      setIsEmptyQuery(isEmpty(parsed));\n    }\n  }, [fieldMap.current.filter.value]);\n\n  const Keys: QueryKey[] = ['filter', 'limit'];\n\n  const {\n    layout = ['filter', ['limit']],\n    schemaFields = [],\n    buttonLabel = DEFAULT_BUTTON_LABEL,\n  } = props;\n  const showToggle = layout.length > 1;\n\n  // for multi-line layouts, the first option must be stand-alone\n  if (showToggle && !isString(layout[0])) {\n    throw new Error(\n      `First item in multi-line layout must be single option, found ${layout[0]}`,\n    );\n  }\n\n  function _isFieldValid(key: QueryKey): boolean {\n    const meta = fieldMap.current[key];\n    return meta.isValid;\n  }\n\n  /**\n   * returns a clone of the current query.\n   *\n   * @return {Object}  clone of the query properties.\n   */\n  function cloneQuery(): Query {\n    const map = fieldMap.current;\n    const filter = map.filter;\n    return {\n      filter: isEmpty(filter.value) ? DEFAULT_FILTER : `${map.filter.value}`,\n      limit: map.limit.value,\n    };\n  }\n\n  /**\n   * returns true if all components of the query are not false.\n   * (note: they can return a value 0, which should not be interpreted as\n   * false here.)\n   *\n   * @return {Boolean}  if the full query is valid.\n   */\n  function validateQuery() {\n    const map = fieldMap.current;\n    return isFilterValid(map.filter.value) && isNumberValid(map.limit.value);\n  }\n\n  /**\n   * routes to the correct validation function.\n   *\n   * @param {String} label   one of `filter`, `limit`\n   * @param {String} input   the input to validated\n   *\n   * @return {Boolean|String}   false if not valid, otherwise the potentially\n   *                            cleaned-up string input.\n   */\n  function validateInput(label: QueryKey, input: string) {\n    if (label === 'filter') {\n      if (isFilterValid(input)) {\n        return input;\n      }\n    }\n    return isNumberValid(input);\n  }\n\n  /**\n   * set many/all properties of a query at once. The values are converted to\n   * strings, and xxxString is set. The values are validated, and xxxValid is\n   * set. the properties themselves are only set for valid values.\n   *\n   * If `query` is null or undefined, set the default options.\n   *\n   * @param {Object} newQuery   a query object with some or all query properties set.\n   * @param {Boolean} autoPopulated_ - flag to indicate whether the query was auto-populated or not.\n   */\n  function setQuery(newQuery: Query | null, autoPopulated_ = false) {\n    if (newQuery === undefined || newQuery === null) {\n      newQuery = _getDefaultQuery();\n    }\n\n    // convert all query inputs into their string values and validate them\n    const inputStrings: Record<QueryKey, string> = {\n      filter: newQuery.filter,\n      limit: `${newQuery.limit}`,\n    };\n\n    // store all keys for which the values are true\n    Keys.forEach((key) => {\n      const meta = fieldMap.current[key];\n      const validated = validateInput(key, inputStrings[key]) !== false;\n\n      if (validated) {\n        meta.value = inputStrings[key];\n        meta.isValid = true;\n        if (key === 'filter') {\n          const filter = newQuery?.filter ?? DEFAULT_FILTER;\n          meta.value = isEmpty(newQuery?.filter) ? {} : JSON.parse(filter);\n        } else if (key === 'limit') {\n          meta.value = newQuery?.limit;\n        }\n      }\n    });\n\n    // determine if query is valid overall with these new values\n    const _valid = Keys.every(_isFieldValid);\n\n    setValid(_valid);\n  }\n\n  /**\n   * Sets `queryString` and `valid`, and if it is a valid input, also set `filter`,\n   * `limit`.\n   * If it is not a valid query, only set `valid` to `false`.\n   *\n   * @param {String} label         Which part of the query, e.g. `filter`\n   * @param {Object} input   the query string (i.e. manual user input)\n   */\n  function setQueryString(label: QueryKey, input: string): void {\n    const validatedInput = validateInput(label, input);\n\n    const _valid = validatedInput !== false;\n    const meta = fieldMap.current[label];\n    switch (label) {\n      case 'filter':\n        if (_valid) {\n          meta.value = input ?? DEFAULT_FILTER;\n        }\n        break;\n      case 'limit':\n        if (_valid) {\n          meta.value = parseInt(input ?? DEFAULT_LIMIT);\n        }\n        break;\n    }\n    meta.isValid = _valid;\n    // if the input was validated, also set the corresponding state variable\n    setValid(Keys.every(_isFieldValid));\n  }\n\n  /**\n   * dismiss current changes to the query and restore `{}` as the query.\n   */\n  function reset() {\n    const defaultQuery = _getDefaultQuery();\n    // if the current query is the same as the default, nothing happens\n    if (isEqual(cloneQuery(), defaultQuery)) {\n      return;\n    }\n\n    // if the last executed query is the default query, we don't need to\n    // change lastExecuteQuery and trigger a change in the QueryChangedStore.\n    if (isEqual(lastExecutedQuery.current, defaultQuery)) {\n      setQuery(null);\n      return;\n    }\n\n    // otherwise we do need to trigger and let all other\n    // components in the app know about the change so they can re-render.\n    if (valid) {\n      Keys.forEach((k) => {\n        const meta = fieldMap.current[k];\n        meta.isValid = true;\n        meta.value = '';\n      });\n      setValid(true);\n      lastExecutedQuery.current.filter = DEFAULT_FILTER;\n      lastExecutedQuery.current.limit = DEFAULT_LIMIT;\n    }\n  }\n\n  /**\n   * apply the current (valid) query, and store it in `lastExecutedQuery`.\n   */\n  const handleApply = useCallback(() => {\n    if (validateQuery()) {\n      setValid(true);\n      setQueryState(QueryState.APPLY_STATE);\n      Object.assign(lastExecutedQuery.current, cloneQuery());\n      if (isFunction(props.onApply)) {\n        const map = fieldMap.current;\n        const filter = lastExecutedQuery.current.filter;\n        const filterString = JSON.stringify(filter);\n        props.onApply(filterString, map.limit.value);\n      }\n    } else {\n      setValid(false);\n    }\n  }, [props.onApply]);\n\n  function onChange(value: string, label: QueryKey) {\n    const type = OPTION_DEFINITION[label].type;\n    if (['numeric', 'document'].includes(type)) {\n      return setQueryString(label, value);\n    }\n  }\n\n  function toggleExpand(): void {\n    setExpanded(!expanded);\n  }\n\n  function onResetButtonClicked() {\n    const { onReset } = props;\n    reset();\n\n    if (isFunction(onReset)) {\n      onReset();\n    }\n  }\n\n  function _queryHasChanges() {\n    const toCompare = {\n      filter: props.filter,\n      limit: props.limit,\n    };\n    return !isEqual(toCompare, lastExecutedQuery.current);\n  }\n\n  function _onFocus() {\n    setHasFocus(true);\n  }\n\n  function _onBlur() {\n    setHasFocus(false);\n  }\n\n  function onApplyButtonClicked(\n    evt: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) {\n    // No evt when pressing enter from ACE.\n    if (evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n    handleApply();\n  }\n\n  /**\n   * renders a single query option, either as its own row, or as part of a\n   * option group.\n   *\n   * @param {String} option       the option name to render\n   * @param {Number} id           the option number\n   * @param {Boolean} hasToggle   this option contains the expand toggle\n   *\n   * @return {Component}          the option component\n   */\n  function Option({\n    option,\n    id,\n    hasToggle,\n  }: {\n    option: QueryKey;\n    id: number;\n    hasToggle: boolean;\n  }) {\n    const { autoPopulated = false } = props;\n\n    const meta = fieldMap.current[option];\n\n    const hasError = !meta.isValid;\n\n    const { placeholder, link, type: inputType } = OPTION_DEFINITION[option];\n\n    // checkbox options use the value directly, text inputs use the\n    // `<option>String` prop.\n    const value = inputType === 'boolean' ? toBool(meta.value) : meta.value;\n\n    return (\n      <QueryOption\n        label={option}\n        autoPopulated={autoPopulated}\n        hasToggle={hasToggle}\n        hasError={hasError}\n        key={`query-option-${id}`}\n        value={value}\n        placeholder={placeholder}\n        link={link}\n        inputType={inputType}\n        onChange={onChange}\n        onApplyFilter={handleApply}\n        schemaFields={schemaFields}\n      />\n    );\n  }\n\n  /**\n   * renders a group of several query options, that are placed horizontally\n   * in the same row.\n   *\n   * @param {Array} group   The group array, e.g. ['sort', 'limit']\n   * @param {Number} id     The group number\n   *\n   * @returns {Component}   The group component\n   */\n  function OptionGroup({ group, id }: { group: QueryKey[]; id: number }) {\n    return (\n      <div\n        className={classnames(styles['option-group'])}\n        key={`option-group-${id}`}\n      >\n        {group.map((option, i) => (\n          <Option\n            option={option}\n            id={i}\n            hasToggle={false}\n            key={`option-group-${i}`}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function OptionRow({ row, id }: { row: QueryKey | QueryKey[]; id: number }) {\n    // only the first in multi-line options has the toggle\n    const hasToggle = id === 0 && showToggle;\n    const isGroup = isArray(row);\n\n    return (\n      <>\n        {isGroup && (\n          <OptionGroup\n            group={row as QueryKey[]}\n            id={id}\n            key={'opt-row-' + id}\n          />\n        )}\n        {!isGroup && (\n          <Option\n            option={row as QueryKey}\n            id={id}\n            hasToggle={hasToggle}\n            key={'option-' + id}\n          />\n        )}\n      </>\n    );\n  }\n\n  /**\n   * renders the rows of the querybar component\n   *\n   * @return {Fragment} array of components, one for each row.\n   */\n  function OptionRows() {\n    if (!expanded) {\n      return <OptionRow row={layout[0]} id={0} />;\n    }\n\n    return (\n      <>\n        {layout.map((row: QueryKey | QueryKey[], id: number) => (\n          <OptionRow row={row} id={id} key={'opt-row-' + id} />\n        ))}\n      </>\n    );\n  }\n\n  /**\n   * Render Query Bar input form (just the input fields and buttons).\n   *\n   * @returns {React.Component} The Query Bar view.\n   */\n  function InputForm() {\n    const _inputGroupClassName = classnames(styles['input-group'], {\n      'has-error': !valid && !isEmptyQuery,\n    });\n\n    const applyDisabled = !valid || isEmptyQuery;\n    const resetDisabled = queryState !== QueryState.APPLY_STATE;\n\n    const _queryOptionClassName = classnames(styles['option-container'], {\n      [styles['has-focus']]: hasFocus,\n    });\n\n    return (\n      <div className={_inputGroupClassName}>\n        <div\n          onBlur={_onBlur}\n          onFocus={_onFocus}\n          className={_queryOptionClassName}\n        >\n          <OptionRows />\n          {showToggle && (\n            <OptionsToggle expanded={expanded} onToggle={toggleExpand} />\n          )}\n        </div>\n\n        <Space>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            id=\"query-bar-apply-filter-button\"\n            key=\"apply-button\"\n            onClick={onApplyButtonClicked}\n            disabled={applyDisabled}\n          >\n            {buttonLabel}\n          </Button>\n          <Button\n            size=\"small\"\n            id=\"query-bar-reset-filter-button\"\n            key=\"reset-button\"\n            disabled={resetDisabled}\n            onClick={onResetButtonClicked}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classnames(styles.component)}>\n      <div className={classnames(styles['input-container'])}>\n        <InputForm />\n      </div>\n    </div>\n  );\n};\n\nexport default QueryBar;\nexport { QueryBar };\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/utils.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/constants.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-option/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/options-toggle/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-option/query-option.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/options-toggle/options-toggle.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/expression.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/query.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/query-parser/aggregation.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/info-sprinkle/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/option-editor/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/info-sprinkle/info-sprinkle.tsx",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/option-editor/option-editor.tsx",["796","797"],"import React, { useEffect, useRef, useState } from 'react';\nimport AceEditor from 'react-ace';\nimport { getAceInstance } from 'react-ace/lib/editorOptions';\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\nimport 'mongodb-ace-mode';\nimport 'mongodb-ace-theme-query';\nimport { AutocompleteField, createCompleter } from '../query-autocompleter';\nimport { Ace } from 'ace-builds';\nimport styles from './option-editor.module.css';\n\nconst ace = getAceInstance();\nconst tools = ace.require('ace/ext/language_tools');\n\n/**\n * Options for the ACE editor.\n */\nconst OPTIONS = {\n  enableLiveAutocompletion: true,\n  tabSize: 2,\n  useSoftTabs: true,\n  fontSize: 11,\n  minLines: 1,\n  maxLines: 10,\n  highlightActiveLine: false,\n  showPrintMargin: false,\n  behavioursEnabled: true,\n  showGutter: false,\n  useWorker: false,\n};\n\ninterface OptionEditorProps {\n  label: string;\n  autoPopulated: boolean;\n  value?: string;\n  onChange: (value: string, label: string) => void;\n  onApply: () => void;\n  schemaFields?: AutocompleteField[];\n}\n\nconst OptionEditor: React.FC<OptionEditorProps> = (props) => {\n  const { schemaFields = [], value = '', label = '' } = props;\n  const [completer] = useState(() => createCompleter(schemaFields));\n  const [edited, setEdited] = useState<string>(value);\n  const _editor = useRef<Ace.Editor>();\n\n  function handleApply() {\n    props?.onApply();\n  }\n\n  function onChangeQuery(newCode: string) {\n    setEdited(newCode);\n    props?.onChange(newCode, label);\n  }\n\n  function onEditorLoaded(opts: Ace.Editor) {\n    _editor.current = opts;\n  }\n\n  function onFocus() {\n    tools.setCompleters([completer]);\n  }\n\n  useEffect(() => {\n    if (_editor.current) {\n      _editor.current.setValue(value);\n      _editor.current.clearSelection();\n    }\n  }, [value, _editor.current]);\n\n  const commands = [\n    {\n      name: 'executeQuery',\n      bindKey: {\n        win: 'Enter',\n        mac: 'Enter',\n      },\n      exec: handleApply,\n    },\n  ];\n\n  return (\n    <AceEditor\n      className={styles['option-editor']}\n      mode=\"mongodb\"\n      theme=\"mongodb-query\"\n      width=\"80%\"\n      value={value}\n      onChange={onChangeQuery}\n      editorProps={{ $blockScrolling: Infinity }}\n      commands={commands}\n      name={`query-bar-option-input-${label}`}\n      setOptions={OPTIONS}\n      onFocus={onFocus}\n      onLoad={onEditorLoaded}\n    />\n  );\n};\n\nexport default OptionEditor;\n","/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/index.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/query-autocompleter.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/autocompete-field.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/expression-operators.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/query-operators.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/components/QueryBar/query-autocompleter/conversion-operators.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-session-storage.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-unmount-effect.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-effect-only-once.ts",["798"],"import { useEffect } from 'react';\n\ntype EffectFunction = (...args: any[]) => any | void;\n// eslint-disable-next-line react-hooks/exhaustive-deps\nconst useEffectOnlyOnce = (func: EffectFunction, deps: any[] = []) =>\n  useEffect(func, deps);\n\nexport default useEffectOnlyOnce;\n","/Users/ccollie/WebstormProjects/toro-ui/src/lib/event-emitter.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/hooks/use-event-emitter.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/JobList.tsx",["799","800","801","802"],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/FilteredJobList.tsx",["803","804","805","806","807"],"import { LeftOutlined, RightOutlined } from '@ant-design/icons';\nimport { Button, Space, Table, TableProps } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { QueueJobActions } from '../../@types';\nimport { JobFragment, JobStatus } from '../../api';\nimport { usePaginationQueryString, useNavigationUpdate } from '../../hooks';\n\ninterface FilteredJobListProps {\n  queueId: string;\n  status: JobStatus;\n  criteria?: string;\n  pageSize?: number;\n  actions: QueueJobActions;\n  onClearSelections: () => void;\n  extraProps: Partial<TableProps<JobFragment>>;\n}\n\nconst FilteredJobList: React.FC<FilteredJobListProps> = (props) => {\n  // eslint-disable-next-line prefer-const\n  let { page, pageSize: _pageSize = 10 } = usePaginationQueryString();\n  const {\n    queueId,\n    status,\n    actions,\n    criteria,\n    pageSize = _pageSize,\n    onClearSelections,\n    extraProps,\n  } = props;\n\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(true);\n  const [called, setCalled] = useState(false);\n  const [data, setData] = useState<JobFragment[]>([]);\n  const pagination = useRef<{\n    page: number;\n    pageSize: number;\n    totalPages: number;\n  }>({\n    page,\n    pageSize,\n    totalPages: 0, // todo: read from ss\n  });\n\n  const [cursor, setCursor] = useState<string>();\n  const [filter, setFilter] = useState<Record<string, any>>();\n  const [hasNext, setHasNext] = useState<boolean>(false);\n\n  const updateNavigation = useNavigationUpdate();\n\n  useEffect(() => {\n    if (cursor) {\n      setHasNext(true);\n    } else if (!criteria) {\n      setHasNext(false);\n    } else {\n      const { page, totalPages } = pagination.current;\n      setHasNext(page < totalPages);\n    }\n  }, [cursor, pagination.current]);\n\n  useEffect(() => {\n    pagination.current.totalPages = 0;\n    pagination.current.page = 0;\n    setCalled(false);\n    if (criteria) {\n      try {\n        const t = JSON.parse(criteria);\n        if (typeof t === 'object') {\n          setFilter(filter);\n        }\n      } catch (e) {}\n    } else {\n      setFilter(undefined);\n    }\n  }, [criteria]);\n\n  function updateNav() {\n    let { page, pageSize } = pagination.current;\n    if (page < 1) page = 1;\n    updateNavigation({\n      status,\n      page,\n      pageSize,\n    });\n  }\n\n  function getSessionKey(suffix: string): string {\n    const rest = cursor ? [cursor] : [];\n    rest.push(suffix);\n    return `FILTERED-JOBS-${queueId}:${rest.join(':')}`;\n  }\n\n  function clear() {\n    setCursor(undefined);\n    pagination.current.page = 1;\n    pagination.current.pageSize = _pageSize;\n    onClearSelections();\n  }\n\n  useEffect(() => {\n    clear();\n    // refresh\n  }, [_pageSize]);\n\n  function refresh() {\n    if (called && !loading) {\n      setRefreshing(true);\n      fetchByCriteria();\n    }\n  }\n\n  function fetchByCriteria(): void {\n    setLoading(true);\n    actions\n      .getJobsByFilter(queueId, {\n        status,\n        count: pagination.current.pageSize,\n        cursor,\n        criteria: cursor ? undefined : filter,\n      })\n      .then(({ jobs, cursor: _cursor }) => {\n        setData(jobs);\n        setCalled(true);\n        onClearSelections();\n        // setExpandedRowKeys([]);\n        if (_cursor !== cursor) {\n          pagination.current.totalPages = 1;\n          pagination.current.page = 1;\n        } else {\n          pagination.current.page = ++pagination.current.totalPages;\n        }\n        setCursor(_cursor ?? undefined);\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n        setRefreshing(false);\n      });\n  }\n\n  function getPageFromSession(index: number): void {\n    if (index > 0) {\n      const key = getSessionKey(`page:${index}`);\n      const data = sessionStorage.getItem(key);\n      if (data && data.length) {\n        try {\n          const items = JSON.parse(data);\n          if (Array.isArray(items)) {\n            setData(items as JobFragment[]);\n            return;\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }\n    setData([]);\n  }\n\n  function getPreviousPage() {\n    const index = (pagination.current.page = Math.min(\n      0,\n      pagination.current.page--,\n    ));\n    getPageFromSession(index);\n  }\n\n  function getNextPage() {\n    const { page, totalPages } = pagination.current;\n    if (page === totalPages) {\n      if (cursor) {\n        fetchByCriteria();\n      }\n    }\n    const index = (pagination.current.page = Math.max(totalPages, page + 1));\n    return getPageFromSession(index);\n  }\n\n  return (\n    <Space direction=\"vertical\">\n      <Table<JobFragment>\n        dataSource={data}\n        loading={loading && !refreshing}\n        {...extraProps}\n      />\n      <Space>\n        <Button\n          disabled={pagination.current.page <= 1}\n          icon={<LeftOutlined />}\n          onClick={getPreviousPage}\n        />\n        {pagination.current.page}\n        <Button\n          disabled={!hasNext}\n          icon={<RightOutlined />}\n          onClick={getNextPage}\n        />\n      </Space>\n    </Space>\n  );\n};\n\nexport default FilteredJobList;\n","/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/events.ts",[],"/Users/ccollie/WebstormProjects/toro-ui/src/pages/Jobs/AddJobDialog.tsx",["808","809","810","811","812","813","814","815","816"],"import { UndoOutlined } from '@ant-design/icons';\nimport {\n  Drawer,\n  Form,\n  Button,\n  Col,\n  Row,\n  Space,\n  AutoComplete,\n  SelectProps,\n} from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getJobSchema, JobSchema } from '../../api';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport { JsonEditor } from '../../components';\nimport { useJobSchemaActions } from '../../hooks';\nimport { useWhyDidYouUpdate } from '../../hooks/use-why-update';\nimport { stringify } from '../../lib';\n\ninterface AddJobDialogOpts {\n  queueId: string;\n  isOpen?: boolean;\n  onClose: () => void;\n}\n\nconst AddJobDialog: React.FC<AddJobDialogOpts> = (props) => {\n  const { queueId, onClose, isOpen = false } = props;\n  const [isSaving, setIsSaving] = useState(false);\n  const [isNewItem, setIsNewItem] = useState(false);\n  const [jobName, setJobName] = useState<string | null>(null);\n  const [jobNames, setJobNames] = useState<string[]>([]);\n  const [schemas, setSchemas] = useState<JobSchema[]>([]);\n  const [jobSchema, setJobSchema] = useState<JobSchema>();\n  const [jobDate, setJobData] = useState<Record<string, any>>({});\n  const [jobOptions, setJobOptions] = useState<Record<string, any>>({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isChanged, setChanged] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n  const [options, setOptions] = useState<SelectProps<object>['options']>([]);\n  const [jobOptionsSchema, setJobOptionsSchema] = useState<\n    Record<string, any>\n  >();\n  const [schemaString, setSchemaString] = useState<string>('{}');\n  const [optionsString, setOptionsString] = useState<string>('{}');\n\n  const schemaActions = useJobSchemaActions(queueId);\n\n  useEffect(() => {\n    setIsLoading(true);\n    // todo: do a specific graphql query for this\n    Promise.all([\n      schemaActions.getJobNames(),\n      schemaActions.getJobOptionsSchema(),\n      schemaActions.getSchemas(),\n    ])\n      .then(([names, optionsSchema, schemas]) => {\n        setJobNames(names);\n        setOptions(\n          jobNames.map((value) => ({\n            value,\n            key: value,\n          })),\n        );\n        setJobOptionsSchema(optionsSchema);\n        setSchemas(schemas ?? []);\n      })\n      .finally(() => setIsLoading(false));\n  }, [queueId]);\n\n  useEffect(() => {\n    let schema, defaultOpts: Record<string, any> | null | undefined;\n    if (jobSchema) {\n      schema = jobSchema.schema;\n      defaultOpts = jobSchema.defaultOpts;\n    }\n    setSchemaString(schema ? stringify(schema) : '{}');\n    setOptionsString(defaultOpts ? stringify(defaultOpts) : '{}');\n  }, [jobSchema]);\n\n  const handleClose = useCallback(() => {\n    onClose && onClose();\n  }, [onClose]);\n\n  function loadSchema(jobName: string) {\n    const found = schemas.find((x) => x.jobName === jobName);\n    if (found) {\n      setJobSchema(found);\n    } else {\n      setJobSchema(undefined);\n    }\n  }\n\n  useEffect(() => {\n    const found = schemas.find((x) => x.jobName === jobName);\n    if (found) {\n      setJobSchema(found);\n    } else {\n      setJobSchema(undefined);\n    }\n  }, [jobName, schemas]);\n\n  function handleJobNameChange(jobName: string): void {\n    const found = !!jobNames.find((x) => x === jobName);\n    setJobName(jobName);\n    setIsNewItem(!found);\n  }\n\n  function saveJob(): void {\n    if (!isEmpty(jobDate)) {\n      setIsSaving(true);\n      setIsSaving(false);\n    }\n  }\n\n  function revertJob() {\n    setJobData({});\n  }\n\n  const onJobUpdate = useCallback((value: Record<string, any> | null) => {\n    setJobData(value || Object.create(null));\n  }, []);\n\n  const onOptionsUpdate = useCallback((value: Record<string, any> | null) => {\n    setJobOptions(value || {});\n  }, []);\n\n  const handleAutoCompleteSearch = (value: string) => {\n    const needle = value.toUpperCase();\n    const filtered = jobNames.filter((name) => {\n      return name.toUpperCase().indexOf(needle) !== -1;\n    });\n    setOptions(\n      filtered.map((value) => ({\n        value,\n        key: value,\n      })),\n    );\n  };\n\n  return (\n    <>\n      <Drawer\n        title=\"Add Job\"\n        width={720}\n        onClose={handleClose}\n        visible={isOpen}\n        bodyStyle={{ paddingBottom: 80 }}\n        footer={\n          <div\n            style={{\n              textAlign: 'right',\n            }}\n          >\n            <Button onClick={handleClose} style={{ marginRight: 8 }}>\n              Close\n            </Button>\n          </div>\n        }\n      >\n        <Form layout=\"vertical\" hideRequiredMark>\n          <Row gutter={16}>\n            <Col span={24}>\n              <Form.Item\n                name=\"name\"\n                label=\"Job Name\"\n                rules={[{ required: true, message: 'Please enter job name' }]}\n              >\n                <AutoComplete\n                  allowClear={true}\n                  onSelect={handleJobNameChange}\n                  placeholder=\"Please select or enter a job name\"\n                  options={options}\n                  disabled={isLoading}\n                  onSearch={handleAutoCompleteSearch}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={24}>\n              <span>Job Data</span>\n              <JsonEditor\n                height=\"250px\"\n                width=\"100%\"\n                id=\"job-data\"\n                name=\"job-data\"\n                isDisabled={isLoading}\n                value={schemaString}\n                onChange={onJobUpdate}\n              />\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={24}>\n              <span>Job Options</span>\n              <JsonEditor\n                height=\"250px\"\n                width=\"100%\"\n                id=\"default-options-editor\"\n                name=\"default_options\"\n                isDisabled={isLoading}\n                value={optionsString}\n                onChange={onOptionsUpdate}\n              />\n            </Col>\n          </Row>\n          <Row gutter={16}>\n            <Col span={24}>\n              <div style={{ textAlign: 'right' }}>\n                <Space size={5}>\n                  <Button\n                    onClick={saveJob}\n                    loading={isSaving}\n                    disabled={!isChanged || !isValid}\n                  >\n                    Save\n                  </Button>\n                  <Button\n                    disabled={!isNewItem}\n                    onClick={revertJob}\n                    icon={<UndoOutlined />}\n                  >\n                    Revert\n                  </Button>\n                </Space>\n              </div>\n            </Col>\n          </Row>\n        </Form>\n      </Drawer>\n    </>\n  );\n};\n\nexport default AddJobDialog;\n",{"ruleId":"817","replacedBy":"818"},{"ruleId":"819","replacedBy":"820"},{"ruleId":"821","severity":1,"message":"822","line":19,"column":10,"nodeType":"823","messageId":"824","endLine":19,"endColumn":19},{"ruleId":"821","severity":1,"message":"825","line":20,"column":10,"nodeType":"823","messageId":"824","endLine":20,"endColumn":25},{"ruleId":"821","severity":1,"message":"826","line":21,"column":10,"nodeType":"823","messageId":"824","endLine":21,"endColumn":23},{"ruleId":"821","severity":1,"message":"827","line":49,"column":7,"nodeType":"823","messageId":"824","endLine":49,"endColumn":15},{"ruleId":"828","severity":1,"message":"829","line":67,"column":71,"nodeType":"830","endLine":69,"endColumn":4,"suggestions":"831"},{"ruleId":"832","severity":1,"message":"833","line":104,"column":7,"nodeType":"834","endLine":104,"endColumn":31},{"ruleId":"821","severity":1,"message":"835","line":41,"column":5,"nodeType":"823","messageId":"824","endLine":41,"endColumn":14},{"ruleId":"821","severity":1,"message":"836","line":42,"column":5,"nodeType":"823","messageId":"824","endLine":42,"endColumn":20},{"ruleId":"821","severity":1,"message":"837","line":1,"column":8,"nodeType":"823","messageId":"824","endLine":1,"endColumn":13},{"ruleId":"817","replacedBy":"838"},{"ruleId":"819","replacedBy":"839"},{"ruleId":"828","severity":1,"message":"840","line":76,"column":23,"nodeType":"830","endLine":76,"endColumn":25,"suggestions":"841"},{"ruleId":"832","severity":1,"message":"833","line":118,"column":9,"nodeType":"834","endLine":118,"endColumn":78},{"ruleId":"821","severity":1,"message":"842","line":7,"column":10,"nodeType":"823","messageId":"824","endLine":7,"endColumn":35},{"ruleId":"821","severity":1,"message":"843","line":26,"column":20,"nodeType":"823","messageId":"824","endLine":26,"endColumn":31},{"ruleId":"821","severity":1,"message":"844","line":31,"column":12,"nodeType":"823","messageId":"824","endLine":31,"endColumn":28},{"ruleId":"828","severity":1,"message":"845","line":57,"column":6,"nodeType":"830","endLine":57,"endColumn":20,"suggestions":"846"},{"ruleId":"821","severity":1,"message":"847","line":101,"column":23,"nodeType":"823","messageId":"824","endLine":101,"endColumn":31},{"ruleId":"817","replacedBy":"848"},{"ruleId":"819","replacedBy":"849"},{"ruleId":"821","severity":1,"message":"850","line":237,"column":10,"nodeType":"823","messageId":"824","endLine":237,"endColumn":26},{"ruleId":"821","severity":1,"message":"851","line":2,"column":8,"nodeType":"823","messageId":"824","endLine":2,"endColumn":12},{"ruleId":"821","severity":1,"message":"852","line":8,"column":18,"nodeType":"823","messageId":"824","endLine":8,"endColumn":27},{"ruleId":"821","severity":1,"message":"853","line":5,"column":3,"nodeType":"823","messageId":"824","endLine":5,"endColumn":18},{"ruleId":"821","severity":1,"message":"854","line":8,"column":3,"nodeType":"823","messageId":"824","endLine":8,"endColumn":13},{"ruleId":"828","severity":1,"message":"855","line":102,"column":55,"nodeType":"830","endLine":102,"endColumn":63,"suggestions":"856"},{"ruleId":"828","severity":1,"message":"857","line":154,"column":59,"nodeType":"830","endLine":154,"endColumn":68,"suggestions":"858"},{"ruleId":"828","severity":1,"message":"859","line":198,"column":6,"nodeType":"830","endLine":198,"endColumn":8,"suggestions":"860"},{"ruleId":"821","severity":1,"message":"861","line":74,"column":26,"nodeType":"823","messageId":"824","endLine":74,"endColumn":31},{"ruleId":"821","severity":1,"message":"862","line":14,"column":13,"nodeType":"823","messageId":"824","endLine":14,"endColumn":32},{"ruleId":"821","severity":1,"message":"863","line":16,"column":14,"nodeType":"823","messageId":"824","endLine":16,"endColumn":32},{"ruleId":"821","severity":1,"message":"864","line":19,"column":10,"nodeType":"823","messageId":"824","endLine":19,"endColumn":18},{"ruleId":"828","severity":1,"message":"865","line":29,"column":6,"nodeType":"830","endLine":29,"endColumn":15,"suggestions":"866"},{"ruleId":"821","severity":1,"message":"867","line":57,"column":12,"nodeType":"823","messageId":"824","endLine":57,"endColumn":26},{"ruleId":"828","severity":1,"message":"868","line":123,"column":6,"nodeType":"830","endLine":123,"endColumn":8,"suggestions":"869"},{"ruleId":"828","severity":1,"message":"870","line":127,"column":6,"nodeType":"830","endLine":127,"endColumn":19,"suggestions":"871"},{"ruleId":"821","severity":1,"message":"872","line":54,"column":16,"nodeType":"823","messageId":"824","endLine":54,"endColumn":23},{"ruleId":"821","severity":1,"message":"873","line":57,"column":12,"nodeType":"823","messageId":"824","endLine":57,"endColumn":23},{"ruleId":"821","severity":1,"message":"874","line":32,"column":17,"nodeType":"823","messageId":"824","endLine":32,"endColumn":25},{"ruleId":"821","severity":1,"message":"875","line":52,"column":54,"nodeType":"823","messageId":"824","endLine":52,"endColumn":60},{"ruleId":"828","severity":1,"message":"876","line":150,"column":3,"nodeType":"830","endLine":150,"endColumn":5,"suggestions":"877"},{"ruleId":"828","severity":1,"message":"878","line":62,"column":6,"nodeType":"830","endLine":62,"endColumn":15,"suggestions":"879"},{"ruleId":"821","severity":1,"message":"880","line":78,"column":18,"nodeType":"823","messageId":"824","endLine":78,"endColumn":30},{"ruleId":"832","severity":1,"message":"833","line":111,"column":7,"nodeType":"834","endLine":111,"endColumn":32},{"ruleId":"821","severity":1,"message":"853","line":4,"column":3,"nodeType":"823","messageId":"824","endLine":4,"endColumn":18},{"ruleId":"821","severity":1,"message":"881","line":6,"column":3,"nodeType":"823","messageId":"824","endLine":6,"endColumn":20},{"ruleId":"821","severity":1,"message":"854","line":7,"column":3,"nodeType":"823","messageId":"824","endLine":7,"endColumn":13},{"ruleId":"821","severity":1,"message":"882","line":8,"column":3,"nodeType":"823","messageId":"824","endLine":8,"endColumn":18},{"ruleId":"821","severity":1,"message":"883","line":41,"column":10,"nodeType":"823","messageId":"824","endLine":41,"endColumn":20},{"ruleId":"821","severity":1,"message":"884","line":42,"column":10,"nodeType":"823","messageId":"824","endLine":42,"endColumn":24},{"ruleId":"821","severity":1,"message":"825","line":43,"column":10,"nodeType":"823","messageId":"824","endLine":43,"endColumn":25},{"ruleId":"885","severity":1,"message":"886","line":50,"column":21,"nodeType":"887","messageId":"888","endLine":50,"endColumn":23},{"ruleId":"817","replacedBy":"889"},{"ruleId":"819","replacedBy":"890"},{"ruleId":"828","severity":1,"message":"891","line":47,"column":3,"nodeType":"830","endLine":47,"endColumn":5,"suggestions":"892"},{"ruleId":"828","severity":1,"message":"891","line":53,"column":6,"nodeType":"830","endLine":53,"endColumn":8,"suggestions":"893"},{"ruleId":"828","severity":1,"message":"894","line":55,"column":6,"nodeType":"830","endLine":55,"endColumn":21,"suggestions":"895"},{"ruleId":"821","severity":1,"message":"874","line":9,"column":17,"nodeType":"823","messageId":"824","endLine":9,"endColumn":25},{"ruleId":"821","severity":1,"message":"861","line":12,"column":17,"nodeType":"823","messageId":"824","endLine":12,"endColumn":22},{"ruleId":"821","severity":1,"message":"896","line":17,"column":9,"nodeType":"823","messageId":"824","endLine":17,"endColumn":15},{"ruleId":"821","severity":1,"message":"861","line":56,"column":17,"nodeType":"823","messageId":"824","endLine":56,"endColumn":22},{"ruleId":"821","severity":1,"message":"897","line":60,"column":33,"nodeType":"823","messageId":"824","endLine":60,"endColumn":41},{"ruleId":"821","severity":1,"message":"898","line":24,"column":7,"nodeType":"823","messageId":"824","endLine":24,"endColumn":18},{"ruleId":"821","severity":1,"message":"899","line":50,"column":23,"nodeType":"823","messageId":"824","endLine":50,"endColumn":37},{"ruleId":"821","severity":1,"message":"861","line":59,"column":55,"nodeType":"823","messageId":"824","endLine":59,"endColumn":60},{"ruleId":"828","severity":1,"message":"900","line":76,"column":20,"nodeType":"830","endLine":76,"endColumn":49,"suggestions":"901"},{"ruleId":"828","severity":1,"message":"902","line":89,"column":6,"nodeType":"830","endLine":89,"endColumn":26,"suggestions":"903"},{"ruleId":"828","severity":1,"message":"904","line":61,"column":6,"nodeType":"830","endLine":61,"endColumn":23,"suggestions":"905"},{"ruleId":"821","severity":1,"message":"906","line":99,"column":24,"nodeType":"823","messageId":"824","endLine":99,"endColumn":39},{"ruleId":"821","severity":1,"message":"907","line":101,"column":9,"nodeType":"823","messageId":"824","endLine":101,"endColumn":25},{"ruleId":"821","severity":1,"message":"908","line":102,"column":11,"nodeType":"823","messageId":"824","endLine":102,"endColumn":15},{"ruleId":"828","severity":1,"message":"909","line":131,"column":6,"nodeType":"830","endLine":131,"endColumn":8,"suggestions":"910"},{"ruleId":"828","severity":1,"message":"911","line":167,"column":6,"nodeType":"830","endLine":167,"endColumn":15,"suggestions":"912"},{"ruleId":"821","severity":1,"message":"913","line":193,"column":12,"nodeType":"823","messageId":"824","endLine":193,"endColumn":19},{"ruleId":"828","severity":1,"message":"914","line":235,"column":5,"nodeType":"830","endLine":235,"endColumn":48,"suggestions":"915"},{"ruleId":"828","severity":1,"message":"916","line":59,"column":6,"nodeType":"830","endLine":59,"endColumn":25,"suggestions":"917"},{"ruleId":"821","severity":1,"message":"918","line":64,"column":13,"nodeType":"823","messageId":"824","endLine":64,"endColumn":22},{"ruleId":"821","severity":1,"message":"919","line":37,"column":17,"nodeType":"823","messageId":"824","endLine":37,"endColumn":28},{"ruleId":"821","severity":1,"message":"844","line":33,"column":12,"nodeType":"823","messageId":"824","endLine":33,"endColumn":28},{"ruleId":"828","severity":1,"message":"845","line":63,"column":6,"nodeType":"830","endLine":63,"endColumn":20,"suggestions":"920"},{"ruleId":"821","severity":1,"message":"921","line":28,"column":24,"nodeType":"823","messageId":"824","endLine":28,"endColumn":39},{"ruleId":"821","severity":1,"message":"922","line":35,"column":10,"nodeType":"823","messageId":"824","endLine":35,"endColumn":17},{"ruleId":"821","severity":1,"message":"923","line":23,"column":10,"nodeType":"823","messageId":"824","endLine":23,"endColumn":28},{"ruleId":"821","severity":1,"message":"924","line":46,"column":10,"nodeType":"823","messageId":"824","endLine":46,"endColumn":26},{"ruleId":"828","severity":1,"message":"925","line":69,"column":6,"nodeType":"830","endLine":69,"endColumn":15,"suggestions":"926"},{"ruleId":"828","severity":1,"message":"927","line":75,"column":6,"nodeType":"830","endLine":75,"endColumn":15,"suggestions":"928"},{"ruleId":"828","severity":1,"message":"929","line":165,"column":6,"nodeType":"830","endLine":165,"endColumn":8,"suggestions":"930"},{"ruleId":"828","severity":1,"message":"929","line":170,"column":6,"nodeType":"830","endLine":170,"endColumn":8,"suggestions":"931"},{"ruleId":"828","severity":1,"message":"932","line":302,"column":6,"nodeType":"830","endLine":302,"endColumn":21,"suggestions":"933"},{"ruleId":"821","severity":1,"message":"934","line":324,"column":12,"nodeType":"823","messageId":"824","endLine":324,"endColumn":28},{"ruleId":"821","severity":1,"message":"935","line":43,"column":10,"nodeType":"823","messageId":"824","endLine":43,"endColumn":16},{"ruleId":"828","severity":1,"message":"936","line":68,"column":6,"nodeType":"830","endLine":68,"endColumn":30,"suggestions":"937"},{"ruleId":"828","severity":1,"message":"938","line":6,"column":3,"nodeType":"823","endLine":6,"endColumn":12,"suggestions":"939"},{"ruleId":"821","severity":1,"message":"940","line":18,"column":3,"nodeType":"823","messageId":"824","endLine":18,"endColumn":21},{"ruleId":"821","severity":1,"message":"941","line":36,"column":10,"nodeType":"823","messageId":"824","endLine":36,"endColumn":16},{"ruleId":"828","severity":1,"message":"942","line":79,"column":20,"nodeType":"830","endLine":79,"endColumn":37,"suggestions":"943"},{"ruleId":"828","severity":1,"message":"944","line":110,"column":6,"nodeType":"830","endLine":110,"endColumn":8,"suggestions":"945"},{"ruleId":"828","severity":1,"message":"946","line":60,"column":6,"nodeType":"830","endLine":60,"endColumn":34,"suggestions":"947"},{"ruleId":"828","severity":1,"message":"948","line":76,"column":6,"nodeType":"830","endLine":76,"endColumn":16,"suggestions":"949"},{"ruleId":"821","severity":1,"message":"950","line":78,"column":12,"nodeType":"823","messageId":"824","endLine":78,"endColumn":21},{"ruleId":"828","severity":1,"message":"951","line":104,"column":6,"nodeType":"830","endLine":104,"endColumn":17,"suggestions":"952"},{"ruleId":"821","severity":1,"message":"913","line":106,"column":12,"nodeType":"823","messageId":"824","endLine":106,"endColumn":19},{"ruleId":"821","severity":1,"message":"953","line":13,"column":10,"nodeType":"823","messageId":"824","endLine":13,"endColumn":22},{"ruleId":"821","severity":1,"message":"954","line":14,"column":8,"nodeType":"823","messageId":"824","endLine":14,"endColumn":15},{"ruleId":"821","severity":1,"message":"923","line":18,"column":10,"nodeType":"823","messageId":"824","endLine":18,"endColumn":28},{"ruleId":"821","severity":1,"message":"955","line":36,"column":10,"nodeType":"823","messageId":"824","endLine":36,"endColumn":20},{"ruleId":"821","severity":1,"message":"956","line":38,"column":21,"nodeType":"823","messageId":"824","endLine":38,"endColumn":31},{"ruleId":"821","severity":1,"message":"957","line":39,"column":19,"nodeType":"823","messageId":"824","endLine":39,"endColumn":29},{"ruleId":"821","severity":1,"message":"924","line":41,"column":10,"nodeType":"823","messageId":"824","endLine":41,"endColumn":26},{"ruleId":"828","severity":1,"message":"958","line":69,"column":6,"nodeType":"830","endLine":69,"endColumn":15,"suggestions":"959"},{"ruleId":"821","severity":1,"message":"960","line":85,"column":12,"nodeType":"823","messageId":"824","endLine":85,"endColumn":22},"no-native-reassign",["961"],"no-negated-in-lhs",["962"],"@typescript-eslint/no-unused-vars","'hourStats' is assigned a value but never used.","Identifier","unusedVar","'errorPercentage' is assigned a value but never used.","'jobsPerMinute' is assigned a value but never used.","'jobTotal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["963"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'maxmemory' is assigned a value but never used.","'blocked_clients' is assigned a value but never used.","'React' is defined but never used.",["961"],["962"],"React Hook useEffect has missing dependencies: 'fetchLogs' and 'startIndex'. Either include them or remove the dependency array. If 'fetchLogs' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["964"],"'ExclamationCircleOutlined' is defined but never used.","'setCanClean' is assigned a value but never used.","'validateDuration' is defined but never used.","React Hook useEffect has missing dependencies: 'handleClose' and 'onOpen'. Either include them or remove the dependency array.",["965"],"'duration' is assigned a value but never used.",["961"],["962"],"'getEndOfPrevious' is defined but never used.","'zhCN' is defined but never used.","'setLocale' is assigned a value but never used.","'BackgroundColor' is defined but never used.","'TickValues' is defined but never used.","React Hook useCallback has a missing dependency: 'onDelete'. Either include it or remove the dependency array. If 'onDelete' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["966"],"React Hook useMemo has a missing dependency: 'handleDelete'. Either include it or remove the dependency array.",["967"],"React Hook useEffect has missing dependencies: 'fetchJobs' and 'loading'. Either include them or remove the dependency array.",["968"],"'error' is assigned a value but never used.","'isAddRuleDialogOpen' is assigned a value but never used.","'closeAddRuleDialog' is assigned a value but never used.","'channels' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadQueue'. Either include it or remove the dependency array.",["969"],"'renderChildren' is defined but never used.","React Hook useEffect has a missing dependency: 'loadAppInfo'. Either include it or remove the dependency array.",["970"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["971"],"'setData' is assigned a value but never used.","'handleClick' is defined but never used.","'setRange' is assigned a value but never used.","'called' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'updateNavigation'. Either include it or remove the dependency array.",["972"],"React Hook useEffect has a missing dependency: 'fetch'. Either include it or remove the dependency array.",["973"],"'setJobCounts' is assigned a value but never used.","'getStatsChartData' is defined but never used.","'TimeAxisFormats' is defined but never used.","'errorCount' is assigned a value but never used.","'completedCount' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["961"],["962"],"React Hook useCallback has a missing dependency: 'onChange'. Either include it or remove the dependency array.",["974"],["975"],"React Hook useCallback has missing dependencies: 'field' and 'sortOrder'. Either include them or remove the dependency array.",["976"],"'Header' is assigned a value but never used.","'appError' is assigned a value but never used.","'ChartHeight' is assigned a value but never used.","'setGranularity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["977"],"React Hook useEffect has missing dependencies: 'queue?.stats' and 'snapshots'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSnapshots' needs the current value of 'queue.stats'.",["978"],"React Hook useEffect has a missing dependency: 'expandedRowKeys'. Either include it or remove the dependency array. You can also do a functional update 'setExpandedRowKeys(e => ...)' if you only need 'expandedRowKeys' in the 'setExpandedRowKeys' call.",["979"],"'setSchemaFields' is assigned a value but never used.","'updateNavigation' is assigned a value but never used.","'page' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'bulkActionHandler'. Either include it or remove the dependency array.",["980"],"React Hook useMemo has a missing dependency: '_actions'. Either include it or remove the dependency array.",["981"],"'refresh' is defined but never used.","React Hook useMemo has a missing dependency: 'expandedRowRender'. Either include it or remove the dependency array.",["982"],"React Hook useEffect has a missing dependency: 'getTab'. Either include it or remove the dependency array.",["983"],"'remaining' is assigned a value but never used.","'selectedTab' is assigned a value but never used.",["984"],"'setPrevDisabled' is assigned a value but never used.","'markers' is assigned a value but never used.","'useWhyDidYouUpdate' is defined but never used.","'jobOptionsSchema' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions' and 'jobNames'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setOptions' needs the current value of 'jobNames'.",["985"],"React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["986"],"React Hook useCallback has a missing dependency: 'updateEditable'. Either include it or remove the dependency array.",["987"],["988"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["989"],"'_queryHasChanges' is defined but never used.","'edited' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: '_editor.current'. Either exclude it or remove the dependency array. Mutable values like '_editor.current' aren't valid dependencies because mutating them doesn't re-render the component.",["990"],"React Hook useEffect has a missing dependency: 'func'. Either include it or remove the dependency array.",["991"],"'JOB_PROMOTED_EVENT' is defined but never used.","'counts' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions', 'onClearSelections', and 'updateNav'. Either include them or remove the dependency array.",["992"],"React Hook useEffect has missing dependencies: 'handleBulkAction' and 'manualRefresh'. Either include them or remove the dependency array.",["993"],"React Hook useEffect has a missing dependency: 'criteria'. Either include it or remove the dependency array. Mutable values like 'pagination.current' aren't valid dependencies because mutating them doesn't re-render the component.",["994"],"React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array. You can also do a functional update 'setFilter(f => ...)' if you only need 'filter' in the 'setFilter' call.",["995"],"'updateNav' is defined but never used.","React Hook useEffect has a missing dependency: 'clear'. Either include it or remove the dependency array.",["996"],"'getJobSchema' is defined but never used.","'isEqual' is defined but never used.","'jobOptions' is assigned a value but never used.","'setChanged' is assigned a value but never used.","'setIsValid' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'jobNames' and 'schemaActions'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setOptions' needs the current value of 'jobNames'.",["997"],"'loadSchema' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"998","fix":"999"},{"desc":"1000","fix":"1001"},{"desc":"1002","fix":"1003"},{"desc":"1004","fix":"1005"},{"desc":"1006","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1010","fix":"1011"},{"desc":"1012","fix":"1013"},{"desc":"1014","fix":"1015"},{"desc":"1016","fix":"1017"},{"desc":"1018","fix":"1019"},{"desc":"1020","fix":"1021"},{"desc":"1020","fix":"1022"},{"desc":"1023","fix":"1024"},{"desc":"1025","fix":"1026"},{"desc":"1027","fix":"1028"},{"desc":"1029","fix":"1030"},{"desc":"1031","fix":"1032"},{"desc":"1033","fix":"1034"},{"desc":"1035","fix":"1036"},{"desc":"1037","fix":"1038"},{"desc":"1002","fix":"1039"},{"desc":"1040","fix":"1041"},{"desc":"1042","fix":"1043"},{"desc":"1044","fix":"1045"},{"desc":"1044","fix":"1046"},{"desc":"1047","fix":"1048"},{"desc":"1049","fix":"1050"},{"desc":"1051","fix":"1052"},{"desc":"1053","fix":"1054"},{"desc":"1055","fix":"1056"},{"desc":"1057","fix":"1058"},{"desc":"1059","fix":"1060"},{"desc":"1061","fix":"1062"},{"desc":"1063","fix":"1064"},"Update the dependencies array to be: [host.id, navigate]",{"range":"1065","text":"1066"},"Update the dependencies array to be: [fetchLogs, startIndex]",{"range":"1067","text":"1068"},"Update the dependencies array to be: [handleClose, onOpen, props.isOpen]",{"range":"1069","text":"1070"},"Update the dependencies array to be: [jobKey, onDelete]",{"range":"1071","text":"1072"},"Update the dependencies array to be: [handleDelete]",{"range":"1073","text":"1074"},"Update the dependencies array to be: [fetchJobs, loading]",{"range":"1075","text":"1076"},"Update the dependencies array to be: [loadQueue, queueId]",{"range":"1077","text":"1078"},"Update the dependencies array to be: [loadAppInfo]",{"range":"1079","text":"1080"},"Update the dependencies array to be: [state, state.hosts]",{"range":"1081","text":"1082"},"Update the dependencies array to be: [updateNavigation]",{"range":"1083","text":"1084"},"Update the dependencies array to be: [fetch, visible]",{"range":"1085","text":"1086"},"Update the dependencies array to be: [onChange]",{"range":"1087","text":"1088"},{"range":"1089","text":"1088"},"Update the dependencies array to be: [field, onSortChanged, sortOrder]",{"range":"1090","text":"1091"},"Update the dependencies array to be: [queueId, range, granularity, getData]",{"range":"1092","text":"1093"},"Update the dependencies array to be: [queueData, loading, queue?.stats, snapshots]",{"range":"1094","text":"1095"},"Update the dependencies array to be: [expandedRowKeys, selectedRowKeys]",{"range":"1096","text":"1097"},"Update the dependencies array to be: [bulkActionHandler]",{"range":"1098","text":"1099"},"Update the dependencies array to be: [_actions, queueId]",{"range":"1100","text":"1101"},"Update the dependencies array to be: [columns, expandedRowRender, expandedRowKeys, selectedRowKeys]",{"range":"1102","text":"1103"},"Update the dependencies array to be: [getTab, location.pathname]",{"range":"1104","text":"1105"},{"range":"1106","text":"1070"},"Update the dependencies array to be: [actions, jobNames, queueId]",{"range":"1107","text":"1108"},"Update the dependencies array to be: [actions, queueId]",{"range":"1109","text":"1110"},"Update the dependencies array to be: [updateEditable]",{"range":"1111","text":"1112"},{"range":"1113","text":"1112"},"Update the dependencies array to be: [props]",{"range":"1114","text":"1115"},"Update the dependencies array to be: [value]",{"range":"1116","text":"1117"},"Update the dependencies array to be: [func]",{"range":"1118","text":"1119"},"Update the dependencies array to be: [status, queueId, actions, onClearSelections, updateNav]",{"range":"1120","text":"1121"},"Update the dependencies array to be: [handleBulkAction, manualRefresh]",{"range":"1122","text":"1123"},"Update the dependencies array to be: [criteria, cursor]",{"range":"1124","text":"1125"},"Update the dependencies array to be: [criteria, filter]",{"range":"1126","text":"1127"},"Update the dependencies array to be: [_pageSize, clear]",{"range":"1128","text":"1129"},"Update the dependencies array to be: [jobNames, queueId, schemaActions]",{"range":"1130","text":"1131"},[2026,2044],"[host.id, navigate]",[1865,1867],"[fetchLogs, startIndex]",[1541,1555],"[handleClose, onOpen, props.isOpen]",[2356,2364],"[jobKey, onDelete]",[3643,3652],"[handleDelete]",[4777,4779],"[fetchJobs, loading]",[873,882],"[loadQueue, queueId]",[2821,2823],"[loadAppInfo]",[2899,2912],"[state, state.hosts]",[3867,3869],"[updateNavigation]",[1839,1848],"[fetch, visible]",[1406,1408],"[onChange]",[1579,1581],[1352,1367],"[field, onSortChanged, sortOrder]",[2269,2298],"[queueId, range, granularity, getData]",[2701,2721],"[queueData, loading, queue?.stats, snapshots]",[1888,1905],"[expandedRowKeys, selectedRowKeys]",[3520,3522],"[bulkActionHandler]",[4408,4417],"[_actions, queueId]",[6010,6053],"[columns, expandedRowRender, expandedRowKeys, selectedRowKeys]",[1674,1693],"[getTab, location.pathname]",[1739,1753],[2262,2271],"[actions, jobNames, queueId]",[2378,2387],"[actions, queueId]",[4652,4654],"[updateEditable]",[4828,4830],[8928,8943],"[props]",[1767,1791],"[value]",[234,238],"[func]",[2087,2104],"[status, queueId, actions, onClearSelections, updateNav]",[2770,2772],"[handleBulkAction, manualRefresh]",[1742,1770],"[criteria, cursor]",[2109,2119],"[criteria, filter]",[2688,2699],"[_pageSize, clear]",[2330,2339],"[jobNames, queueId, schemaActions]"]